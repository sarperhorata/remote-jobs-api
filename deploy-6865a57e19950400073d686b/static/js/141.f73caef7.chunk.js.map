{"version":3,"file":"static/js/141.f73caef7.chunk.js","mappings":"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","sources":["pages/ResetPassword.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate, useSearchParams } from 'react-router-dom';\nimport { getApiUrl } from '../utils/apiConfig';\nimport { Lock, Eye, EyeOff, CheckCircle, X, Check } from '../components/icons/EmojiIcons';\n\ninterface PasswordRequirement {\n  text: string;\n  isValid: boolean;\n}\n\nconst ResetPassword: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n\n  // Password validation\n  const getPasswordRequirements = (password: string): PasswordRequirement[] => {\n    return [\n      {\n        text: \"At least 8 characters\",\n        isValid: password.length >= 8\n      },\n      {\n        text: \"At least 1 number\",\n        isValid: /\\d/.test(password)\n      },\n      {\n        text: \"At least 1 uppercase letter\",\n        isValid: /[A-Z]/.test(password)\n      }\n    ];\n  };\n\n  const passwordRequirements = getPasswordRequirements(password);\n  const isPasswordValid = passwordRequirements.every(req => req.isValid);\n  const passwordsMatch = password === confirmPassword;\n\n  useEffect(() => {\n    const tokenParam = searchParams.get('token');\n    if (!tokenParam) {\n      setError('Invalid or missing reset token');\n      return;\n    }\n    setToken(tokenParam);\n  }, [searchParams]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!token) {\n      setError('Invalid reset token');\n      return;\n    }\n\n    if (!isPasswordValid) {\n      setError('Password must meet all requirements');\n      return;\n    }\n\n    if (!passwordsMatch) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log('üîë Resetting password...');\n      const API_BASE_URL = await getApiUrl();\n\n      const response = await fetch(`${API_BASE_URL}/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: token,\n          new_password: password\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to reset password');\n      }\n\n      const data = await response.json();\n      console.log('‚úÖ Password reset successful:', data);\n\n      setSuccess(true);\n\n    } catch (error: any) {\n      console.error('‚ùå Password reset failed:', error);\n      setError(error.message || 'Failed to reset password. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <CheckCircle className=\"w-10 h-10 text-white\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Password Reset Successful\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-8\">\n              Your password has been successfully reset. You can now sign in with your new password.\n            </p>\n            <button\n              onClick={() => navigate('/login')}\n              className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-4 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium\"\n            >\n              Sign In Now\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8 text-center\">\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <X className=\"w-10 h-10 text-red-500\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Invalid Reset Link\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-8\">\n            This password reset link is invalid or has expired. Please request a new one.\n          </p>\n          <Link\n            to=\"/forgot-password\"\n            className=\"inline-block bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-6 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium\"\n          >\n            Request New Reset Link\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"w-20 h-20 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Lock className=\"w-10 h-10 text-white\" />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Reset Your Password\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Enter your new password below\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"p-4 bg-red-100 border border-red-200 rounded-lg\">\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              New Password\n              {!isPasswordValid && password.length > 0 && (\n                <div className=\"mt-2 p-3 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                  <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Password Requirements:\n                  </div>\n                  <div className=\"space-y-1\">\n                    {passwordRequirements.map((requirement, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <div className=\"w-3 h-3 flex items-center justify-center\">\n                          {requirement.isValid ? (\n                            <Check className=\"text-green-500\" />\n                          ) : (\n                            <X className=\"text-red-500\" />\n                          )}\n                        </div>\n                        <span className={`text-xs ${\n                          requirement.isValid ? 'text-green-700 dark:text-green-400' : 'text-red-700 dark:text-red-400'\n                        }`}>\n                          {requirement.text}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </label>\n            <div className=\"relative\">\n              <input\n                id=\"password\"\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"block w-full pr-10 py-3 px-3 border border-gray-300 dark:border-gray-600 rounded-lg placeholder-gray-500 text-gray-900 dark:text-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n                placeholder=\"Enter your new password\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n              >\n                {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n              </button>\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Confirm New Password\n            </label>\n            <div className=\"relative\">\n              <input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                required\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                className={`block w-full pr-10 py-3 px-3 border rounded-lg placeholder-gray-500 text-gray-900 dark:text-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent ${\n                  confirmPassword && !passwordsMatch\n                    ? 'border-red-300 dark:border-red-600'\n                    : 'border-gray-300 dark:border-gray-600'\n                }`}\n                placeholder=\"Confirm your new password\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\n              >\n                {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n              </button>\n            </div>\n            {confirmPassword && !passwordsMatch && (\n              <p className=\"mt-2 text-sm text-red-600 dark:text-red-400\">\n                Passwords do not match\n              </p>\n            )}\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading || !isPasswordValid || !passwordsMatch}\n            className=\"group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {loading ? (\n              <div className=\"flex items-center\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Resetting Password...\n              </div>\n            ) : (\n              'Reset Password'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <Link\n              to=\"/login\"\n              className=\"font-medium text-orange-600 hover:text-orange-500 transition-colors\"\n            >\n              Back to Sign In\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword; "],"names":["ResetPassword","navigate","useNavigate","searchParams","useSearchParams","password","setPassword","useState","confirmPassword","setConfirmPassword","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","loading","setLoading","success","setSuccess","error","setError","token","setToken","passwordRequirements","text","isValid","length","test","getPasswordRequirements","isPasswordValid","every","req","passwordsMatch","useEffect","tokenParam","get","_jsx","className","children","_jsxs","CheckCircle","onClick","Lock","onSubmit","async","e","preventDefault","console","log","API_BASE_URL","getApiUrl","response","fetch","concat","method","headers","body","JSON","stringify","new_password","ok","errorData","json","Error","detail","data","message","htmlFor","map","requirement","index","Check","X","id","name","type","required","value","onChange","target","placeholder","EyeOff","Eye","disabled","Link","to"],"sourceRoot":""}