name: Buzz2Remote CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci --no-optional
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting failed but continuing..."
      
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check || echo "Type checking failed but continuing..."
      
    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --passWithNoTests --maxWorkers=2
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-timeout pytest-mock
    
    - name: Set environment variables
      run: |
        echo "MONGODB_URI=mongodb://localhost:27017" >> $GITHUB_ENV
        echo "DATABASE_NAME=test_buzz2remote" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-12345" >> $GITHUB_ENV
        echo "JWT_SECRET=test-jwt-secret-12345" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
    
    - name: Run tests with coverage
      run: |
        cd backend
        python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing --timeout=30 --tb=short --maxfail=10
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Frontend security audit
      working-directory: ./frontend
      run: |
        npm ci --no-optional
        npm audit --audit-level=moderate || echo "Frontend security audit completed with findings"
    
    - name: Backend security audit
      working-directory: ./backend
      run: |
        pip install safety bandit
        safety check --output json > security-report.json || echo "Backend security audit completed with findings"
        bandit -r . -f json -o bandit-report.json --exclude ./venv,./tests,./backup_tests || echo "Bandit scan completed with findings"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          backend/security-report.json
          backend/bandit-report.json
        retention-days: 7

  # Build and Deploy (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci --no-optional
        npm run build
      
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './frontend/build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      
    - name: Deploy Backend to Render
      run: |
        echo "Backend deployment triggered via Render webhook"
        # Render will automatically deploy when code is pushed to main