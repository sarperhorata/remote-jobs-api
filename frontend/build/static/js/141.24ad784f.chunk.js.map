{"version":3,"file":"static/js/141.24ad784f.chunk.js","mappings":"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","sources":["pages/ResetPassword.tsx","utils/apiConfig.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Eye, EyeOff, Lock, CheckCircle, AlertCircle } from '../components/icons/EmojiIcons';\nimport { getApiUrl } from '../utils/apiConfig';\n\nconst ResetPassword: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n\n  const token = searchParams.get('token');\n\n  useEffect(() => {\n    if (!token) {\n      setError('Geçersiz veya eksik sıfırlama token\\'ı');\n    }\n  }, [token]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!token) {\n      setError('Token bulunamadı');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setError('Şifreler eşleşmiyor');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const apiUrl = await getApiUrl();\n      const response = await fetch(`${apiUrl}/auth/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: token,\n          new_password: password\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Şifre sıfırlama başarısız');\n      }\n\n      setSuccess(true);\n      setTimeout(() => {\n        navigate('/login');\n      }, 3000);\n\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Şifre sıfırlama başarısız');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 text-center\">\n            <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n              Şifre Başarıyla Sıfırlandı! 🎉\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              Yeni şifreniz kaydedildi. Giriş sayfasına yönlendiriliyorsunuz...\n            </p>\n            <button\n              onClick={() => navigate('/login')}\n              className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-4 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium\"\n            >\n              Giriş Sayfasına Git\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Lock className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n              Yeni Şifre Belirleyin\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Güvenli bir şifre oluşturarak hesabınızı koruyun\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <div className=\"p-3 text-sm text-red-700 bg-red-100 border border-red-200 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Yeni Şifre\n              </label>\n              <div className=\"relative\">\n                <input\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full px-4 py-3 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                  placeholder=\"Güvenli şifrenizi girin\"\n                  disabled={loading}\n                  minLength={8}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3.5 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Şifre Tekrarı\n              </label>\n              <div className=\"relative\">\n                <input\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  required\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className=\"w-full px-4 py-3 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                  placeholder=\"Şifrenizi tekrar girin\"\n                  disabled={loading}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-3.5 text-gray-400 hover:text-gray-600\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n              {confirmPassword && (\n                <div className=\"mt-2 flex items-center space-x-2\">\n                  {password === confirmPassword ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-sm text-green-600 dark:text-green-400\">\n                        Şifreler eşleşiyor\n                      </span>\n                    </>\n                  ) : (\n                    <>\n                      <AlertCircle className=\"w-4 h-4 text-red-500\" />\n                      <span className=\"text-sm text-red-600 dark:text-red-400\">\n                        Şifreler eşleşmiyor\n                      </span>\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading || password !== confirmPassword || password.length < 8 || !token}\n              className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-4 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? 'Şifre Sıfırlanıyor...' : 'Yeni Şifremi Kaydet'}\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword; ","// Dinamik API URL detection sistemi\n// Backend için 8xxx portları (8001, 8000, 8002, vb.) kontrol eder\n// Frontend için 5xxx portları ile çalışabilir\n\ninterface PortConfig {\n  backendPorts: number[];\n  frontendPorts: number[];\n}\n\nconst portConfig: PortConfig = {\n  backendPorts: [8001, 8000, 8002, 8003, 8004], // 8001'i ilk sıraya aldım - stable port\n  frontendPorts: [3001, 3000, 5000, 5001, 5173], // Frontend için öncelik sırası\n};\n\n// API URL cache - Global değişkenler\nlet cachedApiUrl: string | null = null;\nlet apiUrlPromise: Promise<string> | null = null;\n\n// Sync API Base URL - fallback for components that need immediate access\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8001';\n\n// Cache temizleme fonksiyonu\nexport const clearApiUrlCache = () => {\n  console.log('🧹 Clearing API URL cache');\n  cachedApiUrl = null;\n  apiUrlPromise = null;\n};\n\n// Backend port detection\nconst detectBackendPort = async (): Promise<string> => {\n  console.log('🔍 Starting backend port detection...');\n  \n  // Environment variable varsa onu kullan\n  if (process.env.REACT_APP_API_URL) {\n    console.log('✅ Using environment variable:', process.env.REACT_APP_API_URL);\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // Test environment check - force port 8000 for tests\n  if (process.env.NODE_ENV === 'test') {\n    console.log('🧪 Test mode - forcing port 8000');\n    return 'http://localhost:8000';\n  }\n\n  // Backend portlarını sırayla test et\n  for (const port of portConfig.backendPorts) {\n    try {\n      console.log(`🔍 Testing backend on port ${port}...`);\n      const response = await fetch(`http://localhost:${port}/health`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(2000), // 2 saniye timeout\n      });\n      \n      if (response.ok) {\n        console.log(`✅ Backend detected on port ${port}`);\n        return `http://localhost:${port}`;\n      }\n    } catch (error: any) {\n      // Port ulaşılabilir değil, bir sonrakini dene\n      console.log(`❌ Backend not found on port ${port}:`, error.message);\n    }\n  }\n\n  // Hiçbir port çalışmıyorsa varsayılan port\n  console.warn('⚠️ No backend found, using default port 8001');\n  return 'http://localhost:8001';\n};\n\nexport const getApiUrl = async (): Promise<string> => {\n  console.log('📡 getApiUrl called, cachedApiUrl:', cachedApiUrl);\n  \n  // Test ortamında her zaman cache'i temizle\n  if (process.env.NODE_ENV === 'test') {\n    console.log('🧪 Test mode - clearing cache for fresh detection');\n    clearApiUrlCache();\n  }\n  \n  // Cache varsa onu kullan\n  if (cachedApiUrl) {\n    console.log('📋 Using cached API URL:', cachedApiUrl);\n    return cachedApiUrl;\n  }\n\n  // Zaten bir detection çalışıyorsa aynı promise'i bekle\n  if (apiUrlPromise) {\n    console.log('⏳ Detection already in progress, waiting...');\n    return apiUrlPromise;\n  }\n\n  // Yeni detection başlat\n  console.log('🚀 Starting new detection...');\n  apiUrlPromise = detectBackendPort();\n  \n  try {\n    cachedApiUrl = await apiUrlPromise;\n    console.log('✅ Detection complete, cached URL:', cachedApiUrl);\n    return cachedApiUrl;\n  } catch (error) {\n    console.error('❌ Backend detection failed:', error);\n    cachedApiUrl = 'http://localhost:8001'; // Fallback\n    console.log('🔄 Using fallback URL:', cachedApiUrl);\n    return cachedApiUrl;\n  } finally {\n    apiUrlPromise = null; // Promise'i temizle\n  }\n};\n\n// Development/Production mode detection\nexport const isDevelopment = process.env.NODE_ENV === 'development';\nexport const isProduction = process.env.NODE_ENV === 'production';\nexport const isTest = process.env.NODE_ENV === 'test';\n\n// Current frontend port detection\nexport const getCurrentPort = (): number => {\n  if (typeof window === 'undefined') return 3000; // SSR or test environment\n  const port = parseInt(window.location.port);\n  return port || (window.location.protocol === 'https:' ? 443 : 80);\n};\n\n// Backend health check\nexport const checkBackendHealth = async (apiUrl?: string): Promise<boolean> => {\n  try {\n    const url = apiUrl || await getApiUrl();\n    const healthUrl = url.replace('/api', '/health');\n    \n    const response = await fetch(healthUrl, {\n      method: 'GET',\n      signal: AbortSignal.timeout(5000),\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Backend health check failed:', error);\n    return false;\n  }\n};\n\n// Force cache temizleme - sadece gerekli durumlarda\nif (typeof window !== 'undefined' && process.env.NODE_ENV !== 'test') {\n  console.log('🔄 Initial page load - clearing API URL cache');\n  clearApiUrlCache();\n}\n\n// Test ortamında export edilen konfigürasyon objesi\nconst apiConfig = {\n  getApiUrl,\n  clearApiUrlCache,\n  checkBackendHealth,\n  getCurrentPort,\n  isDevelopment,\n  isProduction,\n  isTest,\n};\n\nexport default apiConfig; "],"names":["ResetPassword","navigate","useNavigate","searchParams","useSearchParams","password","setPassword","useState","confirmPassword","setConfirmPassword","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","loading","setLoading","error","setError","success","setSuccess","token","get","useEffect","_jsx","className","children","_jsxs","CheckCircle","onClick","Lock","onSubmit","async","e","preventDefault","apiUrl","getApiUrl","response","fetch","concat","method","headers","body","JSON","stringify","new_password","ok","errorData","json","Error","detail","setTimeout","message","type","required","value","onChange","target","placeholder","disabled","minLength","EyeOff","Eye","_Fragment","AlertCircle","length","cachedApiUrl","apiUrlPromise","API_BASE_URL","process","clearApiUrlCache","console","log","detectBackendPort","window"],"sourceRoot":""}