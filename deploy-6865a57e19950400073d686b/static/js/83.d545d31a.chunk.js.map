{"version":3,"file":"static/js/83.d545d31a.chunk.js","mappings":"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","sources":["services/notificationService.ts","pages/OnboardingCompleteProfile.tsx"],"sourcesContent":["interface NotificationOptions {\n  title: string;\n  body: string;\n  icon?: string;\n  tag?: string;\n  data?: any;\n}\n\nclass NotificationService {\n  private permission: NotificationPermission = 'default';\n  private isSupported: boolean;\n\n  constructor() {\n    this.isSupported = 'Notification' in window;\n    if (this.isSupported) {\n      this.permission = Notification.permission;\n    }\n  }\n\n  async requestPermission(): Promise<NotificationPermission> {\n    if (!this.isSupported) {\n      return 'denied';\n    }\n\n    if (this.permission === 'default') {\n      this.permission = await Notification.requestPermission();\n    }\n\n    return this.permission;\n  }\n\n  async showNotification(options: NotificationOptions): Promise<boolean> {\n    await this.requestPermission();\n\n    if (this.permission !== 'granted') {\n      return false;\n    }\n\n    try {\n      const notification = new Notification(options.title, {\n        body: options.body,\n        icon: options.icon || '/favicon.ico',\n        tag: options.tag,\n        data: options.data,\n      });\n\n      // Auto close after 5 seconds\n      setTimeout(() => {\n        notification.close();\n      }, 5000);\n\n      return true;\n    } catch (error) {\n      console.error('Error showing notification:', error);\n      return false;\n    }\n  }\n\n  async showJobNotification(job: any): Promise<boolean> {\n    return this.showNotification({\n      title: `New Job: ${job.title}`,\n      body: `${job.company} in ${job.location}`,\n      tag: `job-${job.id}`,\n      data: { jobId: job.id, type: 'job_alert' }\n    });\n  }\n\n  async showMultipleJobNotifications(jobs: any[], maxNotifications = 5): Promise<void> {\n    const limitedJobs = jobs.slice(0, maxNotifications);\n    \n    for (const job of limitedJobs) {\n      await this.showJobNotification(job);\n      // Small delay between notifications\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    // If there are more jobs, show a summary notification\n    if (jobs.length > maxNotifications) {\n      await this.showNotification({\n        title: `${jobs.length} New Jobs Available`,\n        body: `${maxNotifications} shown, ${jobs.length - maxNotifications} more available`,\n        tag: 'job-summary'\n      });\n    }\n  }\n\n  isPermissionGranted(): boolean {\n    return this.permission === 'granted';\n  }\n\n  isNotificationSupported(): boolean {\n    return this.isSupported;\n  }\n\n  async checkForNewJobs(lastCheckTime?: string): Promise<any[]> {\n    try {\n      const url = new URL('/api/jobs/recent', window.location.origin);\n      if (lastCheckTime) {\n        url.searchParams.set('since', lastCheckTime);\n      }\n\n      const response = await fetch(url.toString());\n      if (!response.ok) {\n        throw new Error(`Failed to fetch recent jobs: ${response.statusText}`);\n      }\n\n      const jobs = await response.json();\n      return Array.isArray(jobs) ? jobs : [];\n    } catch (error) {\n      console.error('Error checking for new jobs:', error);\n      return [];\n    }\n  }\n\n  startPeriodicJobCheck(intervalMinutes = 30): void {\n    let lastCheckTime = new Date().toISOString();\n\n    const checkInterval = setInterval(async () => {\n      if (!this.isPermissionGranted()) {\n        clearInterval(checkInterval);\n        return;\n      }\n\n      try {\n        const newJobs = await this.checkForNewJobs(lastCheckTime);\n        \n        if (newJobs.length > 0) {\n          await this.showMultipleJobNotifications(newJobs);\n        }\n\n        lastCheckTime = new Date().toISOString();\n      } catch (error) {\n        console.error('Error in periodic job check:', error);\n      }\n    }, intervalMinutes * 60 * 1000);\n\n    // Store interval ID for cleanup if needed\n    (window as any).jobCheckInterval = checkInterval;\n  }\n\n  stopPeriodicJobCheck(): void {\n    if ((window as any).jobCheckInterval) {\n      clearInterval((window as any).jobCheckInterval);\n      delete (window as any).jobCheckInterval;\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const notificationService = new NotificationService();\n\n// Export class for testing or custom instances\nexport { NotificationService };\nexport type { NotificationOptions }; ","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { MapPin, \n  Briefcase, \n  Star, \n  DollarSign, \n  Settings, \n  Bell,\n  X,\n  Clock,\n  CheckCircle,\n  Globe,\n  Mail } from '../components/icons/EmojiIcons';\nimport { notificationService } from '../services/notificationService';\nimport { getApiUrl } from '../utils/apiConfig';\n\ninterface LocationResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  place_id: string;\n}\n\ninterface Skill {\n  id: string;\n  name: string;\n}\n\ninterface JobTitle {\n  id: string;\n  title: string;\n  category: string;\n}\n\ninterface ExperienceLevel {\n  value: string;\n  label: string;\n  minYears: number;\n  maxYears: number | null;\n}\n\nconst OnboardingCompleteProfile: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [userId, setUserId] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Location states\n  const [locationInput, setLocationInput] = useState('');\n  const [locationSuggestions, setLocationSuggestions] = useState<LocationResult[]>([]);\n  const [selectedLocation, setSelectedLocation] = useState<LocationResult | null>(null);\n  const [gettingLocation, setGettingLocation] = useState(false);\n  \n  // Job title states\n  const [jobTitleInput, setJobTitleInput] = useState('');\n  const [jobTitleSuggestions, setJobTitleSuggestions] = useState<JobTitle[]>([]);\n  const [selectedJobTitles, setSelectedJobTitles] = useState<JobTitle[]>([]);\n  const [showJobTitleDropdown, setShowJobTitleDropdown] = useState(false);\n\n  // Experience states\n  const [experienceLevel, setExperienceLevel] = useState<string[]>([]);\n\n  // Skills states\n  const [skillInput, setSkillInput] = useState('');\n  const [skillSuggestions, setSkillSuggestions] = useState<Skill[]>([]);\n  const [selectedSkills, setSelectedSkills] = useState<Skill[]>([]);\n  const [showSkillDropdown, setShowSkillDropdown] = useState(false);\n\n  // Salary range state\n  const [salaryRange, setSalaryRange] = useState<string[]>([]);\n\n  // Work type states\n  const [workTypes, setWorkTypes] = useState<string[]>(['Remote Jobs']);\n\n  // Notification states\n  const [emailNotifications, setEmailNotifications] = useState(false);\n  const [sendNotifications, setSendNotifications] = useState(false);\n  const [notificationPermission, setNotificationPermission] = useState<'default' | 'granted' | 'denied'>('default');\n\n  // Refs\n  const locationTimeoutRef = useRef<NodeJS.Timeout>();\n  const jobTitleTimeoutRef = useRef<NodeJS.Timeout>();\n  const skillTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const experienceLevels: ExperienceLevel[] = [\n    { value: 'entry', label: 'Entry Level (0-2 years)', minYears: 0, maxYears: 2 },\n    { value: 'mid', label: 'Mid Level (2-4 years)', minYears: 2, maxYears: 4 },\n    { value: 'senior', label: 'Senior Level (4-6 years)', minYears: 4, maxYears: 6 },\n    { value: 'lead', label: 'Lead/Principal (6-10 years)', minYears: 6, maxYears: 10 },\n    { value: 'executive', label: 'Executive (10+ years)', minYears: 10, maxYears: null }\n  ];\n\n  const salaryRanges = [\n    '$0 - $30k',\n    '$30k - $70k', \n    '$70k - $120k',\n    '$120k - $180k',\n    '$180k - $240k',\n    '$240k+'\n  ];\n\n  const workTypeOptions = [\n    'Remote Jobs',\n    'Hybrid Jobs', \n    'Office Jobs'\n  ];\n\n  useEffect(() => {\n    const stateUserId = location.state?.userId;\n    if (stateUserId) {\n      setUserId(stateUserId);\n    } else {\n      navigate('/');\n    }\n\n    // Check notification permission\n    if ('Notification' in window) {\n      setNotificationPermission(Notification.permission);\n    }\n  }, [location, navigate]);\n\n  // Location autocomplete\n  const searchLocations = async (query: string) => {\n    if (query.length < 3) {\n      setLocationSuggestions([]);\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1`\n      );\n      const data = await response.json();\n      setLocationSuggestions(data);\n    } catch (error) {\n      console.error('Location search error:', error);\n    }\n  };\n\n  const handleLocationInput = (value: string) => {\n    setLocationInput(value);\n    setSelectedLocation(null);\n    \n    if (locationTimeoutRef.current) {\n      clearTimeout(locationTimeoutRef.current);\n    }\n    \n    locationTimeoutRef.current = setTimeout(() => {\n      searchLocations(value);\n    }, 300);\n  };\n\n  const getCurrentLocation = async () => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by this browser.');\n      return;\n    }\n\n    setGettingLocation(true);\n    \n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        \n        try {\n          // Reverse geocoding to get location name\n          const response = await fetch(\n            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1`\n          );\n          const data = await response.json();\n          \n          if (data && data.display_name) {\n            setLocationInput(data.display_name);\n            setSelectedLocation({\n              place_id: data.place_id?.toString() || '',\n              display_name: data.display_name,\n              lat: latitude.toString(),\n              lon: longitude.toString()\n            });\n          }\n        } catch (error) {\n          console.error('Reverse geocoding error:', error);\n          setError('Failed to get location details');\n        } finally {\n          setGettingLocation(false);\n        }\n      },\n      (error) => {\n        console.error('Geolocation error:', error);\n        setError('Failed to get your location. Please check location permissions.');\n        setGettingLocation(false);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      }\n    );\n  };\n\n  // Job title autocomplete\n  const searchJobTitles = async (query: string) => {\n    if (query.length < 2) {\n      setJobTitleSuggestions([]);\n      return;\n    }\n\n    try {\n      const apiBaseUrl = await getApiUrl();\n      const response = await fetch(`${apiBaseUrl}/jobs/job-titles/search?q=${encodeURIComponent(query)}&limit=10`);\n      \n      if (!response.ok) {\n        throw new Error('API not available');\n      }\n      \n      const data = await response.json();\n      // Ensure proper format for job title suggestions\n      const formattedSuggestions = data.map((item: any, index: number) => ({\n        id: item.id || `api-${index}`,\n        title: item.title,\n        category: item.category || 'Technology'\n      }));\n      setJobTitleSuggestions(formattedSuggestions.slice(0, 10));\n    } catch (error) {\n      console.error('Job titles search error:', error);\n      // Fallback with common job titles\n      const commonJobTitles = [\n        'Software Engineer', 'Frontend Developer', 'Backend Developer', 'Full Stack Developer',\n        'DevOps Engineer', 'Data Scientist', 'Product Manager', 'UX Designer', 'UI Designer',\n        'Marketing Manager', 'Sales Representative', 'Business Analyst', 'Project Manager'\n      ].filter(title => title.toLowerCase().includes(query.toLowerCase()))\n       .map((title, index) => ({ id: `common-${index}`, title, category: 'Technology' }));\n      \n      setJobTitleSuggestions(commonJobTitles);\n    }\n  };\n\n  const handleJobTitleInput = (value: string) => {\n    setJobTitleInput(value);\n    setShowJobTitleDropdown(true);\n    \n    if (jobTitleTimeoutRef.current) {\n      clearTimeout(jobTitleTimeoutRef.current);\n    }\n    \n    jobTitleTimeoutRef.current = setTimeout(() => {\n      searchJobTitles(value);\n    }, 300);\n  };\n\n  const addJobTitle = (jobTitle: JobTitle) => {\n    if (selectedJobTitles.find(jt => jt.id === jobTitle.id || jt.title.toLowerCase() === jobTitle.title.toLowerCase())) return;\n    \n    setSelectedJobTitles([...selectedJobTitles, jobTitle]);\n    setJobTitleInput('');\n    setJobTitleSuggestions([]);\n    setShowJobTitleDropdown(false);\n  };\n\n  const removeJobTitle = (jobTitleId: string) => {\n    setSelectedJobTitles(selectedJobTitles.filter(jt => jt.id !== jobTitleId));\n  };\n\n  // Skills autocomplete\n  const searchSkills = async (query: string) => {\n    if (query.length < 2) {\n      setSkillSuggestions([]);\n      return;\n    }\n\n    try {\n      const apiBaseUrl = await getApiUrl();\n      const response = await fetch(`${apiBaseUrl}/jobs/skills/search?q=${encodeURIComponent(query)}`);\n      \n      if (!response.ok) {\n        throw new Error('API not available');\n      }\n      \n      const data = await response.json();\n      setSkillSuggestions(data.slice(0, 10));\n    } catch (error) {\n      console.error('Skills search error:', error);\n      // Fallback with common skills\n      const commonSkills = [\n        'JavaScript', 'React', 'Node.js', 'Python', 'TypeScript', 'HTML', 'CSS',\n        'Java', 'C++', 'SQL', 'Git', 'Docker', 'AWS', 'MongoDB', 'PostgreSQL',\n        'Vue.js', 'Angular', 'Django', 'Flask', 'Spring', 'Laravel', 'Ruby on Rails',\n        'Go', 'Rust', 'Kotlin', 'Swift', 'React Native', 'Flutter', 'TensorFlow'\n      ].filter(skill => skill.toLowerCase().includes(query.toLowerCase()))\n       .map((skill, index) => ({ id: `common-${index}`, name: skill }));\n      \n      setSkillSuggestions(commonSkills);\n    }\n  };\n\n  const handleSkillInput = (value: string) => {\n    setSkillInput(value);\n    setShowSkillDropdown(true);\n    \n    if (skillTimeoutRef.current) {\n      clearTimeout(skillTimeoutRef.current);\n    }\n    \n    skillTimeoutRef.current = setTimeout(() => {\n      searchSkills(value);\n    }, 300);\n  };\n\n  const addSkill = (skill: Skill) => {\n    if (selectedSkills.length >= 30) {\n      setError('Maximum 30 skills allowed');\n      return;\n    }\n    \n    if (selectedSkills.find(s => s.id === skill.id || s.name.toLowerCase() === skill.name.toLowerCase())) return;\n    \n    setSelectedSkills([...selectedSkills, skill]);\n    setSkillInput('');\n    setSkillSuggestions([]);\n    setShowSkillDropdown(false);\n    setError('');\n  };\n\n  const removeSkill = (skillId: string) => {\n    setSelectedSkills(selectedSkills.filter(s => s.id !== skillId));\n  };\n\n  // Experience level handlers\n  const toggleExperienceLevel = (level: string, includeBelow: boolean = false) => {\n    if (includeBelow) {\n      const levelIndex = experienceLevels.findIndex(el => el.value === level);\n      const levelsToInclude = experienceLevels.slice(0, levelIndex + 1).map(el => el.value);\n      setExperienceLevel(levelsToInclude);\n    } else {\n      if (experienceLevel.includes(level)) {\n        setExperienceLevel(experienceLevel.filter(el => el !== level));\n      } else {\n        setExperienceLevel([...experienceLevel, level]);\n      }\n    }\n  };\n\n  // Salary range handlers\n  const toggleSalaryRange = (range: string) => {\n    if (salaryRange.includes(range)) {\n      setSalaryRange(salaryRange.filter(sr => sr !== range));\n    } else {\n      setSalaryRange([...salaryRange, range]);\n    }\n  };\n\n  // Work type handlers\n  const toggleWorkType = (type: string) => {\n    if (workTypes.includes(type)) {\n      setWorkTypes(workTypes.filter(wt => wt !== type));\n    } else {\n      setWorkTypes([...workTypes, type]);\n    }\n  };\n\n  // Notification handlers\n  const handleNotificationToggle = async (enabled: boolean) => {\n    if (enabled && notificationPermission !== 'granted') {\n      const granted = await notificationService.requestPermission();\n      if (granted) {\n        setNotificationPermission('granted');\n        setSendNotifications(true);\n      } else {\n        setNotificationPermission('denied');\n        setSendNotifications(false);\n      }\n    } else {\n      setSendNotifications(enabled);\n    }\n  };\n\n  const handleComplete = async () => {\n    if (selectedJobTitles.length === 0) {\n      setError('Please select at least one job title');\n      return;\n    }\n\n    if (experienceLevel.length === 0) {\n      setError('Please select at least one experience level');\n      return;\n    }\n\n    if (selectedSkills.length === 0) {\n      setError('Please add at least one skill');\n      return;\n    }\n\n    if (salaryRange.length === 0) {\n      setError('Please select at least one salary range');\n      return;\n    }\n\n    if (workTypes.length === 0) {\n      setError('Please select at least one work type');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const profileData = {\n        location: selectedLocation?.display_name || locationInput,\n        job_titles: selectedJobTitles.map(jt => jt.title),\n        experience_levels: experienceLevel,\n        skills: selectedSkills.map(s => s.name),\n        salary_ranges: salaryRange,\n        work_types: workTypes,\n        email_notifications: emailNotifications,\n        browser_notifications: sendNotifications\n      };\n\n      // Save preferences to localStorage\n      localStorage.setItem('userPreferences', JSON.stringify(profileData));\n\n      // Save to backend\n      const apiBaseUrl = await getApiUrl();\n      const response = await fetch(`${apiBaseUrl}/onboarding/complete-profile`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          ...profileData\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save profile');\n      }\n\n      setSuccess('Profile completed successfully!');\n\n      // Start job checking if notifications enabled\n      if (sendNotifications) {\n        notificationService.startPeriodicJobCheck(30); // Check every 30 minutes\n      }\n\n      // Navigate to search results with preferences\n      setTimeout(() => {\n        navigate('/jobs/search', { \n          state: { \n            searchParams: {\n              job_title: selectedJobTitles.map(jt => jt.title).join(','),\n              location: selectedLocation?.display_name || locationInput,\n              experience_level: experienceLevel.join(','),\n              work_type: workTypes.join(','),\n              salary_range: salaryRange.join(',')\n            }\n          }\n        });\n      }, 2000);\n\n    } catch (error: any) {\n      setError(error.message || 'Failed to complete profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-20 h-20 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-10 h-10 text-white\" />\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Complete Your Profile\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Tell us about yourself to get personalized job recommendations\n            </p>\n          </div>\n\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-100 border border-red-200 rounded-lg text-red-700\">\n              {error}\n            </div>\n          )}\n\n          {success && (\n            <div className=\"mb-6 p-4 bg-green-100 border border-green-200 rounded-lg text-green-700\">\n              {success}\n            </div>\n          )}\n\n          <div className=\"space-y-8\">\n            {/* Location with geolocation */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <MapPin className=\"w-4 h-4 inline mr-2\" />\n                Location\n              </label>\n              <div className=\"relative\">\n                <div className=\"flex\">\n                  <input\n                    type=\"text\"\n                    value={locationInput}\n                    onChange={(e) => handleLocationInput(e.target.value)}\n                    className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                    placeholder=\"Enter your location or use GPS\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={getCurrentLocation}\n                    disabled={gettingLocation}\n                    aria-label=\"Use GPS\"\n                    className=\"px-4 py-2 bg-orange-500 text-white rounded-r-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n                  >\n                    {gettingLocation ? (\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\"></div>\n                    ) : (\n                      <Globe className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                \n                {/* Location suggestions */}\n                {locationSuggestions.length > 0 && (\n                  <div className=\"absolute z-10 w-full mt-1 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-48 overflow-y-auto\">\n                    {locationSuggestions.map((location) => (\n                      <button\n                        key={location.place_id}\n                        onClick={() => {\n                          setSelectedLocation(location);\n                          setLocationInput(location.display_name);\n                          setLocationSuggestions([]);\n                        }}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 text-sm\"\n                      >\n                        {location.display_name}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Job Titles */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Briefcase className=\"w-4 h-4 inline mr-2\" />\n                Current/Desired Job Titles (multiple selection allowed)\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={jobTitleInput}\n                  onChange={(e) => handleJobTitleInput(e.target.value)}\n                  onFocus={() => setShowJobTitleDropdown(true)}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                  placeholder=\"Search and select job titles\"\n                />\n                \n                {/* Job title suggestions */}\n                {showJobTitleDropdown && jobTitleSuggestions.length > 0 && (\n                  <div className=\"absolute z-10 w-full mt-1 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-48 overflow-y-auto\">\n                    {jobTitleSuggestions.map((jobTitle) => (\n                      <button\n                        key={jobTitle.id}\n                        onClick={() => addJobTitle(jobTitle)}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 text-sm\"\n                      >\n                        <div className=\"font-medium\">{jobTitle.title}</div>\n                        <div className=\"text-xs text-gray-500\">{jobTitle.category}</div>\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Selected job titles */}\n              {selectedJobTitles.length > 0 && (\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {selectedJobTitles.map((jobTitle) => (\n                    <span\n                      key={jobTitle.id}\n                      className=\"inline-flex items-center px-3 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 rounded-full text-sm\"\n                    >\n                      {jobTitle.title}\n                      <button\n                        onClick={() => removeJobTitle(jobTitle.id)}\n                        className=\"ml-2 text-orange-600 hover:text-orange-800\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Experience Level */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Star className=\"w-4 h-4 inline mr-2\" />\n                Experience Level\n              </label>\n              <div className=\"space-y-2\">\n                {experienceLevels.map((level) => (\n                  <div key={level.value} className=\"flex items-center group\">\n                    <input\n                      type=\"checkbox\"\n                      id={level.value}\n                      checked={experienceLevel.includes(level.value)}\n                      onChange={(e) => toggleExperienceLevel(level.value)}\n                      className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                    />\n                    <label\n                      htmlFor={level.value}\n                      className=\"ml-3 text-sm text-gray-700 dark:text-gray-300 cursor-pointer flex-1\"\n                    >\n                      {level.label}\n                    </label>\n                    \n                    {/* \"and below\" checkbox - appears on hover */}\n                    <div className=\"opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <input\n                        type=\"checkbox\"\n                        id={`${level.value}-below`}\n                        checked={false}\n                        onChange={() => toggleExperienceLevel(level.value, true)}\n                        className=\"h-3 w-3 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                      />\n                      <label\n                        htmlFor={`${level.value}-below`}\n                        className=\"ml-1 text-xs text-gray-500 cursor-pointer\"\n                      >\n                        and below\n                      </label>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Skills */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Settings className=\"w-4 h-4 inline mr-2\" />\n                Skills (max 30, searchable)\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={skillInput}\n                  onChange={(e) => handleSkillInput(e.target.value)}\n                  onFocus={() => setShowSkillDropdown(true)}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                  placeholder=\"Search and add skills\"\n                />\n                \n                {/* Skill suggestions */}\n                {showSkillDropdown && skillSuggestions.length > 0 && (\n                  <div className=\"absolute z-10 w-full mt-1 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-48 overflow-y-auto\">\n                    {skillSuggestions.map((skill) => (\n                      <button\n                        key={skill.id}\n                        onClick={() => addSkill(skill)}\n                        className=\"w-full text-left px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 text-sm\"\n                      >\n                        {skill.name}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Selected skills */}\n              {selectedSkills.length > 0 && (\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {selectedSkills.map((skill) => (\n                    <span\n                      key={skill.id}\n                      className=\"inline-flex items-center px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full text-sm\"\n                    >\n                      {skill.name}\n                      <button\n                        onClick={() => removeSkill(skill.id)}\n                        className=\"ml-2 text-blue-600 hover:text-blue-800\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              )}\n              \n              {selectedSkills.length > 0 && (\n                <div className=\"mt-1 text-xs text-gray-500\">\n                  {selectedSkills.length}/30 skills selected\n                </div>\n              )}\n            </div>\n\n            {/* Salary Range */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <DollarSign className=\"w-4 h-4 inline mr-2\" />\n                Salary Range\n              </label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                {salaryRanges.map((range) => (\n                  <label\n                    key={range}\n                    className=\"flex items-center cursor-pointer p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={salaryRange.includes(range)}\n                      onChange={() => toggleSalaryRange(range)}\n                      className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n                      {range}\n                    </span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            {/* Work Type */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Clock className=\"w-4 h-4 inline mr-2\" />\n                Work Type\n              </label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                {workTypeOptions.map((type) => (\n                  <label\n                    key={type}\n                    className=\"flex items-center cursor-pointer p-4 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  >\n                    <input\n                      type=\"checkbox\"\n                      checked={workTypes.includes(type)}\n                      onChange={() => toggleWorkType(type)}\n                      className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      {type}\n                    </span>\n                  </label>\n                ))}\n              </div>\n              <p className=\"mt-2 text-xs text-gray-500\">\n                Remote Jobs is selected by default. You can select multiple options.\n              </p>\n            </div>\n\n            {/* Notification Preferences */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                <Bell className=\"w-4 h-4 inline mr-2\" />\n                Notification Preferences\n              </label>\n              <div className=\"space-y-3\">\n                {/* Email notifications */}\n                <label className=\"flex items-center cursor-pointer p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <input\n                    type=\"checkbox\"\n                    checked={emailNotifications}\n                    onChange={(e) => setEmailNotifications(e.target.checked)}\n                    className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                  />\n                  <Mail className=\"w-4 h-4 ml-3 mr-2 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    Email notifications for new jobs\n                  </span>\n                </label>\n\n                {/* Browser notifications */}\n                <label className=\"flex items-center cursor-pointer p-3 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <input\n                    type=\"checkbox\"\n                    checked={sendNotifications}\n                    onChange={(e) => handleNotificationToggle(e.target.checked)}\n                    className=\"h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\"\n                  />\n                  <Bell className=\"w-4 h-4 ml-3 mr-2 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    Send notifications for new jobs\n                  </span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Complete Button */}\n          <div className=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-600\">\n            <button\n              onClick={handleComplete}\n              disabled={loading}\n              className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-4 px-6 rounded-lg font-medium text-lg hover:from-orange-600 hover:to-yellow-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? (\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"animate-spin w-5 h-5 border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                  Completing Profile...\n                </div>\n              ) : (\n                'Complete Profile & Find Jobs'\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingCompleteProfile; "],"names":["notificationService","constructor","permission","isSupported","this","window","Notification","requestPermission","showNotification","options","notification","title","body","icon","tag","data","setTimeout","close","error","console","showJobNotification","job","concat","company","location","id","jobId","type","showMultipleJobNotifications","jobs","maxNotifications","arguments","length","undefined","limitedJobs","slice","Promise","resolve","isPermissionGranted","isNotificationSupported","checkForNewJobs","lastCheckTime","url","URL","origin","searchParams","set","response","fetch","toString","ok","Error","statusText","json","Array","isArray","startPeriodicJobCheck","intervalMinutes","Date","toISOString","checkInterval","setInterval","async","newJobs","clearInterval","jobCheckInterval","stopPeriodicJobCheck","OnboardingCompleteProfile","navigate","useNavigate","useLocation","userId","setUserId","useState","loading","setLoading","setError","success","setSuccess","locationInput","setLocationInput","locationSuggestions","setLocationSuggestions","selectedLocation","setSelectedLocation","gettingLocation","setGettingLocation","jobTitleInput","setJobTitleInput","jobTitleSuggestions","setJobTitleSuggestions","selectedJobTitles","setSelectedJobTitles","showJobTitleDropdown","setShowJobTitleDropdown","experienceLevel","setExperienceLevel","skillInput","setSkillInput","skillSuggestions","setSkillSuggestions","selectedSkills","setSelectedSkills","showSkillDropdown","setShowSkillDropdown","salaryRange","setSalaryRange","workTypes","setWorkTypes","emailNotifications","setEmailNotifications","sendNotifications","setSendNotifications","notificationPermission","setNotificationPermission","locationTimeoutRef","useRef","jobTitleTimeoutRef","skillTimeoutRef","experienceLevels","value","label","minYears","maxYears","useEffect","_location$state","stateUserId","state","handleLocationInput","current","clearTimeout","query","encodeURIComponent","searchLocations","handleJobTitleInput","apiBaseUrl","getApiUrl","formattedSuggestions","map","item","index","category","commonJobTitles","filter","toLowerCase","includes","searchJobTitles","handleSkillInput","commonSkills","skill","name","searchSkills","toggleExperienceLevel","level","levelIndex","findIndex","el","levelsToInclude","_jsx","className","children","_jsxs","CheckCircle","MapPin","onChange","e","target","placeholder","onClick","navigator","geolocation","getCurrentPosition","latitude","longitude","position","coords","_data$place_id","display_name","place_id","lat","lon","enableHighAccuracy","timeout","maximumAge","disabled","Globe","Briefcase","onFocus","jobTitle","find","jt","addJobTitle","removeJobTitle","jobTitleId","X","Star","checked","htmlFor","Settings","s","addSkill","removeSkill","skillId","DollarSign","range","sr","toggleSalaryRange","Clock","wt","toggleWorkType","Bell","Mail","enabled","handleNotificationToggle","profileData","job_titles","experience_levels","skills","salary_ranges","work_types","email_notifications","browser_notifications","localStorage","setItem","JSON","stringify","method","headers","getItem","_objectSpread","user_id","job_title","join","experience_level","work_type","salary_range","message"],"sourceRoot":""}