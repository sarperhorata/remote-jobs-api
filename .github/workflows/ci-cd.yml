name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false --passWithNoTests
      
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration
      
    - name: Run performance tests
      working-directory: ./frontend
      run: npm run test:performance
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results
        path: frontend/coverage/
        retention-days: 30

  # Backend Tests (Python)
  backend-tests:
    name: Backend Tests (Python)
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        
    - name: Set environment variables
      run: |
        echo "MONGODB_URI=mongodb://localhost:27017" >> $GITHUB_ENV
        echo "DATABASE_NAME=test_buzz2remote" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "JWT_SECRET=test-jwt-secret" >> $GITHUB_ENV
        
    - name: Run linting
      working-directory: ./backend
      run: |
        pip install flake8 black isort mypy
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check --diff .
        isort --check-only --diff .
        mypy . --ignore-missing-imports || true
        
    - name: Run security scan
      working-directory: ./backend
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing --timeout=30 --tb=short
        
    - name: Run performance tests
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --durations=10 --timeout=60 -m "not slow"
      continue-on-error: true
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-python
        name: backend-python-coverage
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          backend/test-results.xml
          backend/coverage.xml
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 30

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm install -g serve
        serve -s build -l 3000 &
        sleep 10
      
    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: frontend/cypress/videos/
        retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate
      
    - name: Run security audit (backend)
      working-directory: ./backend
      run: npm audit --audit-level moderate
      
    - name: Run SAST scan
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and Deploy
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, security-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    # Frontend Build
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Analyze bundle size
      working-directory: ./frontend
      run: npm run build:analyze
      
    # Backend Build (Python)
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend tests
      working-directory: ./backend
      run: |
        python -m pytest tests/test_sanity.py -v --timeout=10
      env:
        TESTING: true
        MONGODB_URI: mongodb://localhost:27017
        DATABASE_NAME: test_buzz2remote
      
    # Deploy to staging
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
    # Deploy to production
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/
        retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Run bundle analysis
      working-directory: ./frontend
      run: |
        npm ci
        npm run build:analyze
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          .lighthouseci/
          frontend/build/
        retention-days: 30

  # Notifications
  notifications:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build-and-deploy, performance-tests]
    if: always()
    
    steps:
    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send email notification
      if: failure()
      run: |
        echo "Build failed! Sending email notification..."
        # Add your email notification logic here