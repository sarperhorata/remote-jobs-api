{"version":3,"file":"static/js/214.5db5d0bd.chunk.js","mappings":"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","sources":["services/onboardingService.ts","pages/EmailVerification.tsx"],"sourcesContent":["import { getApiUrl } from '../utils/apiConfig';\n\nexport interface OnboardingStep {\n  message: string;\n  user_id?: string;\n  onboarding_step: number;\n  next_step: string;\n  access_token?: string;\n}\n\nexport interface EmailOnlyRegister {\n  email: string;\n}\n\nexport interface EmailVerification {\n  token: string;\n}\n\nexport interface SetPassword {\n  token: string;\n  password: string;\n  confirm_password: string;\n}\n\nexport interface ProfileCompletion {\n  name?: string;\n  bio?: string;\n  location?: string;\n  skills?: string[];\n  experience_years?: number;\n  job_preferences?: Record<string, any>;\n}\n\nexport interface OnboardingStatus {\n  user_id: string;\n  onboarding_step: number;\n  next_step: string;\n  email_verified: boolean;\n  onboarding_completed: boolean;\n  has_linkedin: boolean;\n  has_resume: boolean;\n}\n\nclass OnboardingService {\n  private async getApiUrl(): Promise<string> {\n    return await getApiUrl();\n  }\n\n  async registerWithEmail(email: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/register-email`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Email kayıt işlemi başarısız');\n    }\n\n    return response.json();\n  }\n\n  async verifyEmail(token: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/verify-email`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Email doğrulama başarısız');\n    }\n\n    return response.json();\n  }\n\n  async setPassword(token: string, password: string, confirmPassword: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/set-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \n        token, \n        password, \n        confirm_password: confirmPassword \n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Şifre belirleme başarısız');\n    }\n\n    return response.json();\n  }\n\n  async getLinkedInAuthUrl(): Promise<{ auth_url: string; state: string }> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/linkedin-auth-url`);\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'LinkedIn auth URL alınamadı');\n    }\n\n    return response.json();\n  }\n\n  async handleLinkedInCallback(code: string, state: string, userId: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/linkedin-callback`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code, state, user_id: userId }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'LinkedIn bağlantısı başarısız');\n    }\n\n    return response.json();\n  }\n\n  async uploadCV(userId: string, file: File): Promise<{ message: string; file_url: string }> {\n    const apiUrl = await this.getApiUrl();\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('user_id', userId);\n\n    const response = await fetch(`${apiUrl}/onboarding/upload-cv`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'CV yükleme başarısız');\n    }\n\n    return response.json();\n  }\n\n  async completeProfile(userId: string, profileData: ProfileCompletion): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/complete-profile?user_id=${userId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(profileData),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Profil tamamlama başarısız');\n    }\n\n    return response.json();\n  }\n\n  async getOnboardingStatus(userId: string): Promise<OnboardingStatus> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/status/${userId}`);\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Onboarding durumu alınamadı');\n    }\n\n    return response.json();\n  }\n\n  // URL'den token parametresini al\n  getTokenFromUrl(): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('token');\n  }\n\n  // URL'den LinkedIn callback parametrelerini al\n  getLinkedInCallbackParams(): { code: string | null; state: string | null } {\n    const urlParams = new URLSearchParams(window.location.search);\n    return {\n      code: urlParams.get('code'),\n      state: urlParams.get('state'),\n    };\n  }\n}\n\nexport const onboardingService = new OnboardingService(); ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { CheckCircle, AlertCircle, Mail, RefreshCw } from '../components/icons/EmojiIcons';\nimport { onboardingService } from '../services/onboardingService';\n\nexport const EmailVerification: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [status, setStatus] = useState<'loading' | 'success' | 'error' | 'expired'>('loading');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n\n  const verifyEmail = useCallback(async (token: string) => {\n    try {\n      const result = await onboardingService.verifyEmail(token);\n      setStatus('success');\n      setMessage(result.message);\n      \n      // 3 saniye sonra şifre belirleme sayfasına yönlendir\n      setTimeout(() => {\n        navigate(`/onboarding/set-password?token=${token}`);\n      }, 3000);\n      \n    } catch (error) {\n      setStatus('error');\n      setError(error instanceof Error ? error.message : 'Email doğrulama başarısız');\n    }\n  }, [navigate]);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.search);\n    const token = urlParams.get('token');\n    \n    if (token) {\n      verifyEmail(token);\n    }\n  }, [location.search, verifyEmail]);\n\n  const handleContinue = () => {\n    const urlParams = new URLSearchParams(location.search);\n    const token = urlParams.get('token');\n    if (token) {\n      navigate(`/onboarding/set-password?token=${token}`);\n    }\n  };\n\n  const handleResendEmail = () => {\n    // Bu fonksiyon email'i tekrar gönderecek\n    window.location.href = '/';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Mail className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n              Email Doğrulama\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Email adresinizi doğruluyoruz...\n            </p>\n          </div>\n\n          {/* Status Content */}\n          <div className=\"text-center\">\n            {status === 'loading' && (\n              <div className=\"space-y-4\">\n                <RefreshCw className=\"w-12 h-12 text-orange-500 animate-spin mx-auto\" />\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Email doğrulanıyor, lütfen bekleyin...\n                </p>\n              </div>\n            )}\n\n            {status === 'success' && (\n              <div className=\"space-y-4\">\n                <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto\" />\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-semibold text-green-700 dark:text-green-400\">\n                    Email Başarıyla Doğrulandı! 🎉\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {message}\n                  </p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-500\">\n                    3 saniye içinde şifre belirleme sayfasına yönlendirileceksiniz...\n                  </p>\n                </div>\n                <button\n                  onClick={handleContinue}\n                  className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-4 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium\"\n                >\n                  Şifre Belirlemek İçin Devam Et\n                </button>\n              </div>\n            )}\n\n            {status === 'error' && (\n              <div className=\"space-y-4\">\n                <AlertCircle className=\"w-12 h-12 text-red-500 mx-auto\" />\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-semibold text-red-700 dark:text-red-400\">\n                    Doğrulama Başarısız\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    {error}\n                  </p>\n                </div>\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={handleResendEmail}\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-4 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium\"\n                  >\n                    Yeni Doğrulama Emaili Gönder\n                  </button>\n                  <button\n                    onClick={() => navigate('/')}\n                    className=\"w-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-3 px-4 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors font-medium\"\n                  >\n                    Ana Sayfaya Dön\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-700\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n              Email doğrulama sorunu yaşıyorsanız, spam klasörünüzü kontrol edin veya{' '}\n              <button \n                onClick={handleResendEmail}\n                className=\"text-orange-600 hover:text-orange-500 underline\"\n              >\n                yeni bir doğrulama emaili\n              </button>\n              {' '}isteyin.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailVerification; "],"names":["onboardingService","getApiUrl","registerWithEmail","email","apiUrl","this","response","fetch","concat","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","verifyEmail","token","setPassword","password","confirmPassword","confirm_password","getLinkedInAuthUrl","handleLinkedInCallback","code","state","userId","user_id","uploadCV","file","formData","FormData","append","completeProfile","profileData","getOnboardingStatus","getTokenFromUrl","URLSearchParams","window","location","search","get","getLinkedInCallbackParams","urlParams","EmailVerification","navigate","useNavigate","useLocation","status","setStatus","useState","message","setMessage","error","setError","useCallback","async","result","setTimeout","useEffect","handleResendEmail","href","_jsx","className","children","_jsxs","Mail","RefreshCw","CheckCircle","onClick","handleContinue","AlertCircle"],"sourceRoot":""}