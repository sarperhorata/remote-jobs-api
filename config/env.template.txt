# üîí Buzz2Remote Environment Variables Template
# 
# ‚ö†Ô∏è IMPORTANT SECURITY INSTRUCTIONS:
# 1. Copy this file to .env
# 2. Fill in your actual values (never use these placeholder values)
# 3. NEVER commit .env files to git
# 4. Use strong passwords and secure API keys

# =================
# API Configuration
# =================
API_HOST=0.0.0.0
API_PORT=5001
API_DEBUG=False
API_RELOAD=False

# =================
# Domain Configuration
# =================
DOMAIN=buzz2remote.com
FRONTEND_URL=https://buzz2remote.com
BACKEND_URL=https://buzz2remote-api.onrender.com

# =================
# Database Configuration
# =================
# ‚ö†Ô∏è CRITICAL: Generate new strong password for MongoDB Atlas
# Go to MongoDB Atlas ‚Üí Database Access ‚Üí Users ‚Üí Edit User ‚Üí Update Password
MONGODB_URI=mongodb+srv://NEW_USERNAME:NEW_STRONG_PASSWORD@cluster.mongodb.net/buzz2remote?retryWrites=true&w=majority

# =================
# Logging Configuration
# =================
LOG_LEVEL=INFO

# =================
# Telegram Configuration
# =================
# Get bot token from @BotFather on Telegram
TELEGRAM_BOT_TOKEN=your-telegram-bot-token

# ‚ö†Ô∏è IMPORTANT: Get correct channel ID for @buzz2remote
# 1. Add bot to @buzz2remote channel as admin
# 2. Send a message to the channel
# 3. Run: python3 get_telegram_channel_id.py
TELEGRAM_CHAT_ID=your-channel-id-here
TELEGRAM_CHANNEL=@buzz2remote

# =================
# CORS Configuration
# =================
CORS_ORIGINS=https://buzz2remote.com,https://www.buzz2remote.com,http://localhost:3000

# =================
# Render Configuration
# =================
RENDER_SERVICE_ID=your-render-service-id
RENDER_API_KEY=your-render-api-key
RENDER_URL=https://buzz2remote-api.onrender.com
RENDER_DEPLOY_HOOK=your-deploy-hook-url

# =================
# Netlify Configuration
# =================
NETLIFY_SITE_ID=your-netlify-site-id
NETLIFY_AUTH_TOKEN=your-netlify-auth-token

# =================
# OpenAI Configuration (for CV parsing)
# =================
# ‚ö†Ô∏è CRITICAL: Generate new API key from OpenAI Dashboard
# Go to OpenAI ‚Üí API Keys ‚Üí Create new secret key
OPENAI_API_KEY=your-new-openai-api-key-here

# =================
# Email Configuration
# =================
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=support@buzz2remote.com
EMAIL_PASSWORD=your-gmail-app-password
EMAIL_FROM=Buzz2Remote <support@buzz2remote.com>

# =================
# Security Keys
# =================
# Generate strong random strings for these
SECRET_KEY=your-super-secret-key-for-jwt-minimum-32-characters
JWT_SECRET=your-jwt-secret-key-minimum-32-characters

# =================
# Stripe Configuration
# =================
# Get these from your Stripe Dashboard
STRIPE_SECRET_KEY=your-stripe-secret-key
STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key

# =================
# Environment
# =================
NODE_ENV=production

# =================
# Optional: Development Settings
# =================
# Only for local development - set API_DEBUG=True, NODE_ENV=development
# For production, keep these as False/production

# =================
# SECURITY CHECKLIST BEFORE USING:
# =================
# [ ] Changed MongoDB username and password
# [ ] Generated new OpenAI API key
# [ ] Added bot to @buzz2remote channel and got correct channel ID
# [ ] Generated strong SECRET_KEY and JWT_SECRET (min 32 chars)
# [ ] Set up Gmail app password for EMAIL_PASSWORD
# [ ] Added Stripe API keys and webhook secret
# [ ] Verified all placeholder values are replaced
# [ ] Confirmed .env is in .gitignore
# [ ] Tested application with new credentials

# =================
# EMERGENCY CONTACTS:
# =================
# If secrets are compromised again:
# 1. Change all passwords/keys IMMEDIATELY
# 2. Run: python3 fix_hardcoded_secrets.py
# 3. Check git history for leaked credentials
# 4. Consider rotating all API keys as precaution

# =================
# HOW TO USE THIS TEMPLATE:
# =================
# 1. Copy this file: cp env.template.txt .env
# 2. Edit .env with your real values
# 3. Verify .env is in .gitignore (should already be there)
# 4. Test your application: python3 test_telegram.py 

# LinkedIn OAuth
LINKEDIN_CLIENT_ID=
LINKEDIN_CLIENT_SECRET=
LINKEDIN_REDIRECT_URI= 