{"version":3,"file":"static/js/772.57688509.chunk.js","mappings":"8MAWA,MAmKA,EAnKsCA,KACpC,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAA0B,CACxD,CACEC,KAAM,wBACNC,OAAQ,cACRC,SAAS,IAAIC,MAAOC,cACpBC,SAAU,GAEZ,CACEL,KAAM,gBACNC,OAAQ,cACRC,SAAS,IAAIC,MAAOC,eAEtB,CACEJ,KAAM,cACNC,OAAQ,cACRC,SAAS,IAAIC,MAAOC,eAEtB,CACEJ,KAAM,iBACNC,OAAQ,cACRC,SAAS,IAAIC,MAAOC,kBAIjBE,EAAWC,IAAgBR,EAAAA,EAAAA,UAAqC,CAAC,IACjES,EAAOC,IAAYV,EAAAA,EAAAA,UAAwB,MAkD5CW,EAAkBT,IACtB,OAAQA,GACN,IAAK,cACH,MAAO,8BACT,IAAK,WACH,MAAO,gCACT,IAAK,OACH,MAAO,0BACT,QACE,MAAO,8BAIb,OACEU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qDAAoDC,UACjEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oDAAmDC,SAAC,2BAGlEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAA4BC,SAAC,gDAK3CL,IACCG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8CAA6CC,SACzDL,KAILG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAC5BhB,EAASkB,IAAKC,IACbL,EAAAA,EAAAA,KAAA,OAEEC,UAAU,6CAA4CC,UAEtDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAClBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oCAAmCC,SAC9CG,EAAQhB,QAEXc,EAAAA,EAAAA,MAAA,KAAGF,UAAU,6BAA4BC,SAAA,CAAC,aAC7B,IAAIV,KAAKa,EAAQd,SAASe,wBAGzCH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8BAA6BC,SAAA,EAC1CF,EAAAA,EAAAA,KAAA,QAAMC,UAAS,8CAAAM,OAAgDR,EAAeM,EAAQf,SAAUY,SAC7FG,EAAQf,UAEXU,EAAAA,EAAAA,KAAA,UACEQ,QAASA,IApGJC,WACvB,IAIE,GAHAX,EAAS,MACTF,EAAac,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAACE,IAAc,KAE5B,0BAAhBA,EAAyC,CAE3C,IAAIlB,EAAW,EACf,MAAMmB,EAAWC,YAAY,KAC3BpB,GAAY,EACZP,EAAYuB,GAAQA,EAAKN,IAAIC,GAC3BA,EAAQhB,OAASuB,GAAWD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnBN,GAAO,IAAEX,SAAUqB,KAAKC,IAAItB,EAAU,OAC3CW,KAEL,KAGGY,QAAiBC,EAAAA,EAAMC,KAAK,GAADZ,OAAIa,EAAAA,EAAO,8BAG5CC,cAAcR,GACd1B,EAAYuB,GAAQA,EAAKN,IAAIC,GAC3BA,EAAQhB,OAASuB,GAAWD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnBN,GAAO,IAAEX,SAAU,IAAKH,SAAS,IAAIC,MAAOC,gBACjDY,UAIAa,EAAAA,EAAMC,KAAK,GAADZ,OAAIa,EAAAA,EAAO,8BAA8B,CACvDE,QAAQ,qEAADf,OAAuEU,EAASM,KAAKC,iBAEhG,YAEQN,EAAAA,EAAMC,KAAK,GAADZ,OAAIa,EAAAA,EAAO,0BAA0B,CAAEf,QAASO,IAChEzB,EAAYuB,GAAQA,EAAKN,IAAIC,GAC3BA,EAAQhB,OAASuB,GAAWD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnBN,GAAO,IAAEd,SAAS,IAAIC,MAAOC,gBAClCY,GAGV,CAAE,MAAOoB,GACP3B,EAAS2B,aAAeC,MAAQD,EAAIH,QAAU,oBAChD,CAAC,QACC1B,EAAac,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAACE,IAAc,IAClD,GAuDiCe,CAAiBtB,EAAQhB,MACxCuC,SAAUjC,EAAUU,EAAQhB,MAC5BY,UAAS,4CAAAM,OACPZ,EAAUU,EAAQhB,MACd,+CACA,gDACHa,SAEFP,EAAUU,EAAQhB,MAAQ,aAAe,cAK9B,0BAAjBgB,EAAQhB,WAAyDwC,IAArBxB,EAAQX,WACnDS,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wCAAuCC,UACpDF,EAAAA,EAAAA,KAAA,OACEC,UAAU,+DACV6B,MAAO,CAAEC,MAAM,GAADxB,OAAKF,EAAQX,SAAQ,WAGvCS,EAAAA,EAAAA,MAAA,KAAGF,UAAU,wCAAuCC,SAAA,CACjDG,EAAQX,SAAS,uBAxCrBW,EAAQhB,c","sources":["pages/ExternalAPIServices.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { API_URL } from '../config';\nimport axios from 'axios';\n\ninterface ServiceStatus {\n  name: string;\n  status: 'operational' | 'degraded' | 'down';\n  lastRun: string;\n  progress?: number;\n}\n\nconst ExternalAPIServices: React.FC = () => {\n  const [services, setServices] = useState<ServiceStatus[]>([\n    {\n      name: 'Buzz2remote Companies',\n      status: 'operational',\n      lastRun: new Date().toISOString(),\n      progress: 0\n    },\n    {\n      name: 'LinkedIn Jobs',\n      status: 'operational',\n      lastRun: new Date().toISOString()\n    },\n    {\n      name: 'Indeed Jobs',\n      status: 'operational',\n      lastRun: new Date().toISOString()\n    },\n    {\n      name: 'Glassdoor Jobs',\n      status: 'operational',\n      lastRun: new Date().toISOString()\n    }\n  ]);\n\n  const [isRunning, setIsRunning] = useState<{ [key: string]: boolean }>({});\n  const [error, setError] = useState<string | null>(null);\n\n  const handleRunService = async (serviceName: string) => {\n    try {\n      setError(null);\n      setIsRunning(prev => ({ ...prev, [serviceName]: true }));\n\n      if (serviceName === 'Buzz2remote Companies') {\n        // Start progress bar\n        let progress = 0;\n        const interval = setInterval(() => {\n          progress += 1;\n          setServices(prev => prev.map(service => \n            service.name === serviceName \n              ? { ...service, progress: Math.min(progress, 100) }\n              : service\n          ));\n        }, 100);\n\n        // Call API to start scanning\n        const response = await axios.post(`${API_URL}/api/admin/scan-companies`);\n        \n        // Clear interval and set final progress\n        clearInterval(interval);\n        setServices(prev => prev.map(service => \n          service.name === serviceName \n            ? { ...service, progress: 100, lastRun: new Date().toISOString() }\n            : service\n        ));\n\n        // Send Telegram notification\n        await axios.post(`${API_URL}/api/admin/notify-telegram`, {\n          message: `Company scanning completed successfully! Total companies scanned: ${response.data.totalCompanies}`\n        });\n      } else {\n        // Handle other services\n        await axios.post(`${API_URL}/api/admin/run-service`, { service: serviceName });\n        setServices(prev => prev.map(service => \n          service.name === serviceName \n            ? { ...service, lastRun: new Date().toISOString() }\n            : service\n        ));\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setIsRunning(prev => ({ ...prev, [serviceName]: false }));\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'operational':\n        return 'text-green-600 bg-green-100';\n      case 'degraded':\n        return 'text-yellow-600 bg-yellow-100';\n      case 'down':\n        return 'text-red-600 bg-red-100';\n      default:\n        return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-extrabold text-gray-900 sm:text-4xl\">\n            External API Services\n          </h1>\n          <p className=\"mt-4 text-lg text-gray-500\">\n            Manage and monitor external API services\n          </p>\n        </div>\n\n        {error && (\n          <div className=\"mt-4 p-4 bg-red-100 text-red-700 rounded-md\">\n            {error}\n          </div>\n        )}\n\n        <div className=\"mt-8 space-y-6\">\n          {services.map((service) => (\n            <div\n              key={service.name}\n              className=\"bg-white shadow rounded-lg overflow-hidden\"\n            >\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900\">\n                      {service.name}\n                    </h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      Last run: {new Date(service.lastRun).toLocaleString()}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(service.status)}`}>\n                      {service.status}\n                    </span>\n                    <button\n                      onClick={() => handleRunService(service.name)}\n                      disabled={isRunning[service.name]}\n                      className={`px-4 py-2 rounded-md text-sm font-medium ${\n                        isRunning[service.name]\n                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                          : 'bg-indigo-600 text-white hover:bg-indigo-700'\n                      }`}\n                    >\n                      {isRunning[service.name] ? 'Running...' : 'Run'}\n                    </button>\n                  </div>\n                </div>\n\n                {service.name === 'Buzz2remote Companies' && service.progress !== undefined && (\n                  <div className=\"mt-4\">\n                    <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                      <div\n                        className=\"bg-indigo-600 h-2.5 rounded-full transition-all duration-300\"\n                        style={{ width: `${service.progress}%` }}\n                      ></div>\n                    </div>\n                    <p className=\"mt-2 text-sm text-gray-500 text-right\">\n                      {service.progress}% Complete\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExternalAPIServices; "],"names":["ExternalAPIServices","services","setServices","useState","name","status","lastRun","Date","toISOString","progress","isRunning","setIsRunning","error","setError","getStatusColor","_jsx","className","children","_jsxs","map","service","toLocaleString","concat","onClick","async","prev","_objectSpread","serviceName","interval","setInterval","Math","min","response","axios","post","API_URL","clearInterval","message","data","totalCompanies","err","Error","handleRunService","disabled","undefined","style","width"],"sourceRoot":""}