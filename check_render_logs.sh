#!/bin/bash

echo "üîç Render Deployment Status Check"
echo "=================================="

RENDER_URL="https://buzz2remote-api.onrender.com"

echo ""
echo "1. Testing basic connectivity..."
RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$RENDER_URL" 2>/dev/null)
HTTP_CODE=$(echo $RESPONSE | sed 's/.*HTTP_CODE://')

if [ "$HTTP_CODE" = "200" ]; then
    echo "   ‚úÖ Service is responding!"
    echo "   üìÑ Response: $(echo $RESPONSE | sed 's/HTTP_CODE:.*//')"
elif [ "$HTTP_CODE" = "404" ]; then
    echo "   ‚ùå Still 404 - FastAPI app not starting"
elif [ "$HTTP_CODE" = "502" ]; then
    echo "   ‚ö†Ô∏è  Bad Gateway - Service starting up or crashed"
elif [ "$HTTP_CODE" = "503" ]; then
    echo "   ‚ö†Ô∏è  Service Unavailable - Still deploying"
elif [ "$HTTP_CODE" = "000" ]; then
    echo "   ‚ùå No response - Service down"
else
    echo "   ‚ö†Ô∏è  HTTP $HTTP_CODE: $(echo $RESPONSE | sed 's/HTTP_CODE:.*//')"
fi

echo ""
echo "2. Testing health endpoint..."
HEALTH_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$RENDER_URL/health" 2>/dev/null)
HEALTH_CODE=$(echo $HEALTH_RESPONSE | sed 's/.*HTTP_CODE://')

if [ "$HEALTH_CODE" = "200" ]; then
    echo "   ‚úÖ Health check OK"
    echo "   üìÑ Health: $(echo $HEALTH_RESPONSE | sed 's/HTTP_CODE:.*//')"
else
    echo "   ‚ùå Health check failed: $HEALTH_CODE"
fi

echo ""
echo "3. Testing API docs..."
DOCS_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$RENDER_URL/docs" 2>/dev/null)
DOCS_CODE=$(echo $DOCS_RESPONSE | sed 's/.*HTTP_CODE://')

if [ "$DOCS_CODE" = "200" ]; then
    echo "   ‚úÖ API docs accessible"
else
    echo "   ‚ùå API docs failed: $DOCS_CODE"
fi

echo ""
echo "4. Testing sample API endpoint..."
API_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$RENDER_URL/api/v1/jobs/?limit=1" 2>/dev/null)
API_CODE=$(echo $API_RESPONSE | sed 's/.*HTTP_CODE://')

if [ "$API_CODE" = "200" ]; then
    echo "   ‚úÖ Jobs API working"
elif [ "$API_CODE" = "500" ]; then
    echo "   ‚ùå Internal Server Error - Check logs for DB connection"
else
    echo "   ‚ùå Jobs API failed: $API_CODE"
fi

echo ""
echo "üìã SUMMARY:"
echo "==========="

if [ "$HTTP_CODE" = "200" ]; then
    echo "üéâ SUCCESS! Render deployment is working!"
    echo ""
    echo "‚úÖ Available endpoints:"
    echo "   ‚Ä¢ API: $RENDER_URL"
    echo "   ‚Ä¢ Health: $RENDER_URL/health" 
    echo "   ‚Ä¢ Docs: $RENDER_URL/docs"
    echo "   ‚Ä¢ Jobs: $RENDER_URL/api/v1/jobs/"
    echo ""
    echo "üîó Cronjob endpoints now working:"
    echo "   ‚Ä¢ Database Cleanup: $RENDER_URL/api/v1/cron/database-cleanup"
    echo "   ‚Ä¢ External API: $RENDER_URL/api/v1/cron/external-api-crawler"
    echo "   ‚Ä¢ Job Stats: $RENDER_URL/api/v1/cron/job-statistics"
    echo "   ‚Ä¢ Health Check: $RENDER_URL/api/v1/cron/health-check"
    echo "   ‚Ä¢ Status: $RENDER_URL/api/v1/cron/status"
    
elif [ "$HTTP_CODE" = "503" ] || [ "$HTTP_CODE" = "502" ]; then
    echo "‚è≥ Deployment still in progress or starting up..."
    echo "   Wait 2-3 minutes and run this script again"
    
elif [ "$HTTP_CODE" = "404" ]; then
    echo "‚ùå FastAPI app not starting - Possible issues:"
    echo "   1. Import errors in backend/main.py"
    echo "   2. Missing dependencies in requirements.txt"
    echo "   3. Environment variables not loaded"
    echo "   4. Database connection failing"
    echo ""
    echo "üîç Check Render logs for error details:"
    echo "   ‚Ä¢ Go to Render Dashboard ‚Üí Your Service ‚Üí Logs tab"
    echo "   ‚Ä¢ Look for Python import errors"
    echo "   ‚Ä¢ Check for missing package errors"
    echo "   ‚Ä¢ Verify MongoDB connection"
    
else
    echo "‚ùì Unexpected response: HTTP $HTTP_CODE"
    echo "   Check Render service status and logs"
fi

echo ""
echo "üîß Next steps based on result:"
echo "=============================="
echo "‚Ä¢ If 200: ‚úÖ All working - test cronjobs"  
echo "‚Ä¢ If 503/502: ‚è≥ Wait and retry"
echo "‚Ä¢ If 404: üîç Check Render deployment logs"
echo "‚Ä¢ If 500: üîç Check MongoDB connection in logs" 