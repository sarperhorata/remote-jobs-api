{"version":3,"file":"static/js/752.3e46fed0.chunk.js","mappings":"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","sources":["services/onboardingService.ts","pages/SetPassword.tsx"],"sourcesContent":["import { getApiUrl } from '../utils/apiConfig';\n\nexport interface OnboardingStep {\n  message: string;\n  user_id?: string;\n  onboarding_step: number;\n  next_step: string;\n  access_token?: string;\n}\n\nexport interface EmailOnlyRegister {\n  email: string;\n}\n\nexport interface EmailVerification {\n  token: string;\n}\n\nexport interface SetPassword {\n  token: string;\n  password: string;\n  confirm_password: string;\n}\n\nexport interface ProfileCompletion {\n  name?: string;\n  bio?: string;\n  location?: string;\n  skills?: string[];\n  experience_years?: number;\n  job_preferences?: Record<string, any>;\n}\n\nexport interface OnboardingStatus {\n  user_id: string;\n  onboarding_step: number;\n  next_step: string;\n  email_verified: boolean;\n  onboarding_completed: boolean;\n  has_linkedin: boolean;\n  has_resume: boolean;\n}\n\nclass OnboardingService {\n  private async getApiUrl(): Promise<string> {\n    return await getApiUrl();\n  }\n\n  async registerWithEmail(email: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/register-email`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Email kayıt işlemi başarısız');\n    }\n\n    return response.json();\n  }\n\n  async verifyEmail(token: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/verify-email`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Email doğrulama başarısız');\n    }\n\n    return response.json();\n  }\n\n  async setPassword(token: string, password: string, confirmPassword: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/set-password`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \n        token, \n        password, \n        confirm_password: confirmPassword \n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Şifre belirleme başarısız');\n    }\n\n    return response.json();\n  }\n\n  async getLinkedInAuthUrl(): Promise<{ auth_url: string; state: string }> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/linkedin-auth-url`);\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'LinkedIn auth URL alınamadı');\n    }\n\n    return response.json();\n  }\n\n  async handleLinkedInCallback(code: string, state: string, userId: string): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/linkedin-callback`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code, state, user_id: userId }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'LinkedIn bağlantısı başarısız');\n    }\n\n    return response.json();\n  }\n\n  async uploadCV(userId: string, file: File): Promise<{ message: string; file_url: string }> {\n    const apiUrl = await this.getApiUrl();\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('user_id', userId);\n\n    const response = await fetch(`${apiUrl}/onboarding/upload-cv`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'CV yükleme başarısız');\n    }\n\n    return response.json();\n  }\n\n  async completeProfile(userId: string, profileData: ProfileCompletion): Promise<OnboardingStep> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/complete-profile?user_id=${userId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(profileData),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Profil tamamlama başarısız');\n    }\n\n    return response.json();\n  }\n\n  async getOnboardingStatus(userId: string): Promise<OnboardingStatus> {\n    const apiUrl = await this.getApiUrl();\n    const response = await fetch(`${apiUrl}/onboarding/status/${userId}`);\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Onboarding durumu alınamadı');\n    }\n\n    return response.json();\n  }\n\n  // URL'den token parametresini al\n  getTokenFromUrl(): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('token');\n  }\n\n  // URL'den LinkedIn callback parametrelerini al\n  getLinkedInCallbackParams(): { code: string | null; state: string | null } {\n    const urlParams = new URLSearchParams(window.location.search);\n    return {\n      code: urlParams.get('code'),\n      state: urlParams.get('state'),\n    };\n  }\n}\n\nexport const onboardingService = new OnboardingService(); ","import React, { useState, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { Eye, EyeOff, Lock, CheckCircle, AlertCircle } from '../components/icons/EmojiIcons';\nimport { onboardingService } from '../services/onboardingService';\n\nconst SetPassword: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Password strength indicators\n  const [passwordChecks, setPasswordChecks] = useState({\n    length: false,\n    uppercase: false,\n    lowercase: false,\n    number: false,\n    special: false,\n  });\n\n  useEffect(() => {\n    const token = searchParams.get('token');\n    if (!token) {\n      setError('Geçersiz veya eksik token');\n    }\n  }, [searchParams]);\n\n  useEffect(() => {\n    // Check password requirements\n    setPasswordChecks({\n      length: password.length >= 8,\n      uppercase: /[A-Z]/.test(password),\n      lowercase: /[a-z]/.test(password),\n      number: /\\d/.test(password),\n      special: /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n    });\n  }, [password]);\n\n  const isPasswordValid = Object.values(passwordChecks).every(check => check);\n  const doPasswordsMatch = password === confirmPassword && password.length > 0;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const token = searchParams.get('token');\n    \n    if (!token) {\n      setError('Token bulunamadı');\n      return;\n    }\n\n    if (!isPasswordValid) {\n      setError('Şifre güvenlik kriterlerini sağlamıyor');\n      return;\n    }\n\n    if (!doPasswordsMatch) {\n      setError('Şifreler eşleşmiyor');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await onboardingService.setPassword(token, password, confirmPassword);\n      \n      // Şifre başarıyla belirlendi, profil kurulum sayfasına yönlendir\n      navigate('/onboarding/profile-setup', { \n        state: { \n          userId: result.user_id,\n          message: result.message \n        }\n      });\n      \n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Şifre belirleme başarısız');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Lock className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n              Şifre Belirleyin\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Güvenli bir şifre oluşturarak hesabınızı koruyun\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <div className=\"p-3 text-sm text-red-700 bg-red-100 border border-red-200 rounded-lg\">\n                {error}\n              </div>\n            )}\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Şifre\n              </label>\n              <div className=\"relative\">\n                <input\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full px-4 py-3 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                  placeholder=\"Güvenli şifrenizi girin\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-3.5 text-gray-400 hover:text-gray-600\"\n                >\n                  {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n            </div>\n\n            {password && (\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Şifre Gereksinimleri:\n                </p>\n                <div className=\"space-y-1\">\n                  {[\n                    { key: 'length', text: 'En az 8 karakter' },\n                    { key: 'uppercase', text: 'En az 1 büyük harf (A-Z)' },\n                    { key: 'lowercase', text: 'En az 1 küçük harf (a-z)' },\n                    { key: 'number', text: 'En az 1 rakam (0-9)' },\n                    { key: 'special', text: 'En az 1 özel karakter (!@#$...)' },\n                  ].map(({ key, text }) => (\n                    <div key={key} className=\"flex items-center space-x-2\">\n                      {passwordChecks[key as keyof typeof passwordChecks] ? (\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      ) : (\n                        <div className=\"w-4 h-4 border border-gray-300 rounded-full\" />\n                      )}\n                      <span className={`text-sm ${\n                        passwordChecks[key as keyof typeof passwordChecks] \n                          ? 'text-green-600 dark:text-green-400' \n                          : 'text-gray-500 dark:text-gray-400'\n                      }`}>\n                        {text}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Şifre Tekrarı\n              </label>\n              <div className=\"relative\">\n                <input\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  required\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  className=\"w-full px-4 py-3 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                  placeholder=\"Şifrenizi tekrar girin\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-3.5 text-gray-400 hover:text-gray-600\"\n                >\n                  {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                </button>\n              </div>\n              {confirmPassword && (\n                <div className=\"mt-2 flex items-center space-x-2\">\n                  {doPasswordsMatch ? (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"text-sm text-green-600 dark:text-green-400\">\n                        Şifreler eşleşiyor\n                      </span>\n                    </>\n                  ) : (\n                    <>\n                      <AlertCircle className=\"w-4 h-4 text-red-500\" />\n                      <span className=\"text-sm text-red-600 dark:text-red-400\">\n                        Şifreler eşleşmiyor\n                      </span>\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={loading || !isPasswordValid || !doPasswordsMatch}\n              className=\"w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white py-3 px-4 rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? 'Şifre Belirleniyor...' : 'Şifremi Belirle ve Devam Et'}\n            </button>\n          </form>\n\n          <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n              Güvenli şifre oluşturduktan sonra profil kurulum adımına geçeceksiniz.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SetPassword; "],"names":["onboardingService","getApiUrl","registerWithEmail","email","apiUrl","this","response","fetch","concat","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","verifyEmail","token","setPassword","password","confirmPassword","confirm_password","getLinkedInAuthUrl","handleLinkedInCallback","code","state","userId","user_id","uploadCV","file","formData","FormData","append","completeProfile","profileData","getOnboardingStatus","getTokenFromUrl","URLSearchParams","window","location","search","get","getLinkedInCallbackParams","urlParams","SetPassword","navigate","useNavigate","searchParams","useSearchParams","useState","setConfirmPassword","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","loading","setLoading","error","setError","passwordChecks","setPasswordChecks","length","uppercase","lowercase","number","special","useEffect","test","isPasswordValid","Object","values","every","check","doPasswordsMatch","_jsx","className","children","_jsxs","Lock","onSubmit","async","e","preventDefault","result","message","type","required","value","onChange","target","placeholder","onClick","EyeOff","Eye","key","text","map","_ref","CheckCircle","_Fragment","AlertCircle","disabled"],"sourceRoot":""}