name: Auto Fix Deployment Errors

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run auto-fix script
      working-directory: frontend
      run: node scripts/auto-fix-errors.js
      
    - name: Run backend tests
      working-directory: backend
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true
      
    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --coverage --watchAll=false
      continue-on-error: true
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      
    - name: Commit fixes if any
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --staged --quiet || git commit -m "ðŸ”§ Auto-fix deployment errors"
        
    - name: Push fixes
      run: git push
      continue-on-error: true

  deploy:
    needs: auto-fix
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: frontend
      run: npm run build
      
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './frontend/build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 1

  backend-deploy:
    needs: auto-fix
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      working-directory: backend
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true
        
    - name: Deploy to Render
      run: |
        echo "Deploying to Render..."
        # Add your Render deployment logic here
        # Example: curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
        #   -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
        #   -H "Content-Type: application/json"
        echo "Render deployment completed" 