{"version":3,"file":"static/js/905.a120dcf6.chunk.js","mappings":"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","sources":["utils/apiConfig.ts","components/AutoApplyButton.tsx","pages/JobSearchResults.tsx"],"sourcesContent":["// Dinamik API URL detection sistemi\n// Backend için 8xxx portları (8001, 8000, 8002, vb.) kontrol eder\n// Frontend için 5xxx portları ile çalışabilir\n\ninterface PortConfig {\n  backendPorts: number[];\n  frontendPorts: number[];\n}\n\nconst portConfig: PortConfig = {\n  backendPorts: [8001, 8000, 8002, 8003, 8004], // 8001'i ilk sıraya aldım - stable port\n  frontendPorts: [3001, 3000, 5000, 5001, 5173], // Frontend için öncelik sırası\n};\n\n// API URL cache - Global değişkenler\nlet cachedApiUrl: string | null = null;\nlet apiUrlPromise: Promise<string> | null = null;\n\n// Sync API Base URL - fallback for components that need immediate access\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8001';\n\n// Cache temizleme fonksiyonu\nexport const clearApiUrlCache = () => {\n  console.log('🧹 Clearing API URL cache');\n  cachedApiUrl = null;\n  apiUrlPromise = null;\n};\n\n// Backend port detection\nconst detectBackendPort = async (): Promise<string> => {\n  console.log('🔍 Starting backend port detection...');\n  \n  // Environment variable varsa onu kullan\n  if (process.env.REACT_APP_API_URL) {\n    console.log('✅ Using environment variable:', process.env.REACT_APP_API_URL);\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // Test environment check - force port 8000 for tests\n  if (process.env.NODE_ENV === 'test') {\n    console.log('🧪 Test mode - forcing port 8000');\n    return 'http://localhost:8000';\n  }\n\n  // Backend portlarını sırayla test et\n  for (const port of portConfig.backendPorts) {\n    try {\n      console.log(`🔍 Testing backend on port ${port}...`);\n      const response = await fetch(`http://localhost:${port}/health`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(2000), // 2 saniye timeout\n      });\n      \n      if (response.ok) {\n        console.log(`✅ Backend detected on port ${port}`);\n        return `http://localhost:${port}`;\n      }\n    } catch (error: any) {\n      // Port ulaşılabilir değil, bir sonrakini dene\n      console.log(`❌ Backend not found on port ${port}:`, error.message);\n    }\n  }\n\n  // Hiçbir port çalışmıyorsa varsayılan port\n  console.warn('⚠️ No backend found, using default port 8001');\n  return 'http://localhost:8001';\n};\n\nexport const getApiUrl = async (): Promise<string> => {\n  console.log('📡 getApiUrl called, cachedApiUrl:', cachedApiUrl);\n  \n  // Test ortamında her zaman cache'i temizle\n  if (process.env.NODE_ENV === 'test') {\n    console.log('🧪 Test mode - clearing cache for fresh detection');\n    clearApiUrlCache();\n  }\n  \n  // Cache varsa onu kullan\n  if (cachedApiUrl) {\n    console.log('📋 Using cached API URL:', cachedApiUrl);\n    return cachedApiUrl;\n  }\n\n  // Zaten bir detection çalışıyorsa aynı promise'i bekle\n  if (apiUrlPromise) {\n    console.log('⏳ Detection already in progress, waiting...');\n    return apiUrlPromise;\n  }\n\n  // Yeni detection başlat\n  console.log('🚀 Starting new detection...');\n  apiUrlPromise = detectBackendPort();\n  \n  try {\n    cachedApiUrl = await apiUrlPromise;\n    console.log('✅ Detection complete, cached URL:', cachedApiUrl);\n    return cachedApiUrl;\n  } catch (error) {\n    console.error('❌ Backend detection failed:', error);\n    cachedApiUrl = 'http://localhost:8001'; // Fallback\n    console.log('🔄 Using fallback URL:', cachedApiUrl);\n    return cachedApiUrl;\n  } finally {\n    apiUrlPromise = null; // Promise'i temizle\n  }\n};\n\n// Development/Production mode detection\nexport const isDevelopment = process.env.NODE_ENV === 'development';\nexport const isProduction = process.env.NODE_ENV === 'production';\nexport const isTest = process.env.NODE_ENV === 'test';\n\n// Current frontend port detection\nexport const getCurrentPort = (): number => {\n  if (typeof window === 'undefined') return 3000; // SSR or test environment\n  const port = parseInt(window.location.port);\n  return port || (window.location.protocol === 'https:' ? 443 : 80);\n};\n\n// Backend health check\nexport const checkBackendHealth = async (apiUrl?: string): Promise<boolean> => {\n  try {\n    const url = apiUrl || await getApiUrl();\n    const healthUrl = url.replace('/api', '/health');\n    \n    const response = await fetch(healthUrl, {\n      method: 'GET',\n      signal: AbortSignal.timeout(5000),\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Backend health check failed:', error);\n    return false;\n  }\n};\n\n// Force cache temizleme - sadece gerekli durumlarda\nif (typeof window !== 'undefined' && process.env.NODE_ENV !== 'test') {\n  console.log('🔄 Initial page load - clearing API URL cache');\n  clearApiUrlCache();\n}\n\n// Test ortamında export edilen konfigürasyon objesi\nconst apiConfig = {\n  getApiUrl,\n  clearApiUrlCache,\n  checkBackendHealth,\n  getCurrentPort,\n  isDevelopment,\n  isProduction,\n  isTest,\n};\n\nexport default apiConfig; ","import React, { useState } from 'react';\nimport { Zap, Loader, CheckCircle2, AlertCircle } from './icons/EmojiIcons';\nimport { getApiUrl } from '../utils/apiConfig';\n\ninterface AutoApplyButtonProps {\n  jobUrl: string;\n  jobId: string;\n  onApplied?: (applicationId: string) => void;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst AutoApplyButton: React.FC<AutoApplyButtonProps> = ({\n  jobUrl,\n  jobId,\n  onApplied,\n  className = '',\n  size = 'md'\n}) => {\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [isApplying, setIsApplying] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<any>(null);\n  const [previewData, setPreviewData] = useState<any>(null);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState(false);\n\n  // Size configurations\n  const sizeConfig = {\n    sm: {\n      button: 'px-3 py-1.5 text-xs',\n      icon: 'w-3 h-3',\n      text: 'text-xs'\n    },\n    md: {\n      button: 'px-4 py-2 text-sm',\n      icon: 'w-4 h-4',\n      text: 'text-sm'\n    },\n    lg: {\n      button: 'px-6 py-3 text-base',\n      icon: 'w-5 h-5',\n      text: 'text-base'\n    }\n  };\n\n  const config = sizeConfig[size];\n\n  const analyzeForm = async () => {\n    setIsAnalyzing(true);\n    setError('');\n    \n    try {\n      const apiUrl = await getApiUrl();\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        throw new Error('Please login to use Auto Apply');\n      }\n\n      const response = await fetch(`${apiUrl}/auto-apply/analyze-form`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          job_url: jobUrl\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to analyze job form');\n      }\n\n      const result = await response.json();\n      setAnalysisResult(result);\n\n      if (result.auto_apply_supported) {\n        // Get preview of generated responses\n        await getPreview();\n      } else {\n        setError('Auto Apply is not supported for this job posting. The form is too complex or not detected.');\n      }\n\n    } catch (err: any) {\n      setError(err.message || 'Failed to analyze job form');\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getPreview = async () => {\n    try {\n      const apiUrl = await getApiUrl();\n      const token = localStorage.getItem('token');\n\n      const response = await fetch(`${apiUrl}/auto-apply/preview-responses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          job_url: jobUrl\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to generate preview');\n      }\n\n      const preview = await response.json();\n      setPreviewData(preview);\n      setShowPreview(true);\n\n    } catch (err: any) {\n      setError(err.message || 'Failed to generate preview');\n    }\n  };\n\n  const performAutoApply = async () => {\n    setIsApplying(true);\n    setError('');\n\n    try {\n      const apiUrl = await getApiUrl();\n      const token = localStorage.getItem('token');\n\n      const response = await fetch(`${apiUrl}/auto-apply/auto-apply`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          job_url: jobUrl,\n          job_id: jobId\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Auto Apply failed');\n      }\n\n      const result = await response.json();\n      \n      if (result.success) {\n        setSuccess(true);\n        setShowPreview(false);\n        if (onApplied && result.application_id) {\n          onApplied(result.application_id);\n        }\n      } else {\n        throw new Error(result.message || 'Auto Apply failed');\n      }\n\n    } catch (err: any) {\n      setError(err.message || 'Auto Apply failed');\n    } finally {\n      setIsApplying(false);\n    }\n  };\n\n  // If already successfully applied\n  if (success) {\n    return (\n      <div className={`flex items-center gap-2 ${config.text} text-green-600 ${className}`}>\n        <CheckCircle2 className={config.icon} />\n        Auto Applied\n      </div>\n    );\n  }\n\n  // Initial state - show Auto Apply button\n  if (!analysisResult && !showPreview) {\n    return (\n      <button\n        onClick={analyzeForm}\n        disabled={isAnalyzing}\n        className={`bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors font-medium flex items-center gap-2 disabled:bg-purple-400 disabled:cursor-not-allowed ${config.button} ${className}`}\n      >\n        {isAnalyzing ? (\n          <>\n            <Loader className={`${config.icon} animate-spin`} />\n            Analyzing...\n          </>\n        ) : (\n          <>\n            <Zap className={config.icon} />\n            Auto Apply\n          </>\n        )}\n      </button>\n    );\n  }\n\n  // Show error if any\n  if (error) {\n    return (\n      <div className=\"space-y-2\">\n        <div className={`flex items-center gap-2 ${config.text} text-red-600`}>\n          <AlertCircle className={config.icon} />\n          <span>Auto Apply Failed</span>\n        </div>\n        <div className=\"text-xs text-red-500\">{error}</div>\n        <button\n          onClick={() => {\n            setError('');\n            setAnalysisResult(null);\n            setShowPreview(false);\n          }}\n          className={`text-purple-600 hover:text-purple-700 ${config.text} underline`}\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  // Show preview modal/popup\n  if (showPreview && previewData) {\n    return (\n      <div className=\"relative\">\n        {/* The button that triggers the modal is outside, this is just the modal content */}\n        <div className=\"absolute top-full left-0 mt-2 w-80 bg-white border border-gray-200 rounded-lg shadow-lg p-4 z-50\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-medium text-gray-900\">Auto Apply Preview</h4>\n              <button\n                onClick={() => setShowPreview(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                ✕\n              </button>\n            </div>\n    \n            <div className=\"text-sm text-gray-600\">\n              <div className=\"flex justify-between mb-2\">\n                <span>Form fields detected:</span>\n                <span className=\"font-medium\">{previewData.total_fields}</span>\n              </div>\n              <div className=\"flex justify-between mb-2\">\n                <span>Auto-fillable fields:</span>\n                <span className=\"font-medium text-green-600\">{previewData.fields_with_responses}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Profile completeness:</span>\n                <span className=\"font-medium\">{previewData.user_profile_completeness?.overall_percentage}%</span>\n              </div>\n            </div>\n    \n            {previewData.user_profile_completeness?.ready_for_auto_apply ? (\n              <div className=\"text-sm text-green-600 bg-green-50 p-2 rounded\">\n                ✓ Your profile is ready for Auto Apply\n              </div>\n            ) : (\n              <div className=\"text-sm text-yellow-600 bg-yellow-50 p-2 rounded\">\n                ⚠ Complete your profile for better Auto Apply results\n              </div>\n            )}\n    \n            <div className=\"space-y-2\">\n              <h5 className=\"text-sm font-medium text-gray-700\">Sample responses:</h5>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {previewData.field_previews?.slice(0, 3).map((field: any, index: number) => (\n                  <div key={index} className=\"text-xs bg-gray-50 p-2 rounded\">\n                    <div className=\"font-medium text-gray-700\">{field.field_label || field.field_name}</div>\n                    <div className=\"text-gray-600 truncate\">{field.generated_value || 'Will be auto-filled'}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n    \n            <div className=\"flex gap-2 pt-2 border-t\">\n              <button\n                onClick={performAutoApply}\n                disabled={isApplying}\n                className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white px-3 py-2 rounded text-sm font-medium disabled:bg-purple-400\"\n              >\n                {isApplying ? 'Applying...' : 'Confirm Auto Apply'}\n              </button>\n              <button\n                onClick={() => {\n                  setShowPreview(false);\n                  setAnalysisResult(null); // Reset analysis on cancel\n                }}\n                className=\"px-3 py-2 border border-gray-300 rounded text-sm hover:bg-gray-50\"\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default AutoApplyButton; ","import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport AutoApplyButton from '../components/AutoApplyButton';\nimport { Job } from '../types/job';\nimport { getApiUrl } from '../utils/apiConfig';\nimport { \n  MapPin, Filter, Grid3X3, List, Search, ExternalLink, Building2, \n  Clock, Bookmark, BookmarkPlus, CheckCircle2, Briefcase, Eye, \n  Users, TrendingUp, X \n} from '../components/icons/EmojiIcons';\n\ninterface SearchFilters {\n  jobTitle: string;\n  location: string;\n  experienceLevel: string[];\n  workType: string[];\n  salaryRange: string[];\n  skills: string[];\n  sortBy: 'newest' | 'salary' | 'relevance';\n  postedAge: string;\n  companySize: string[];\n  negativeKeywords: string;\n}\n\nconst JobSearchResults: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalJobs, setTotalJobs] = useState(0);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('list');\n  const [showFilters, setShowFilters] = useState(false);\n  const [appliedJobs, setAppliedJobs] = useState<Set<string>>(new Set());\n  const [savedJobs, setSavedJobs] = useState<Set<string>>(new Set());\n  const [selectedJobTitles, setSelectedJobTitles] = useState<string[]>([]);\n  \n  const [filters, setFilters] = useState<SearchFilters>({\n    jobTitle: '',\n    location: '',\n    experienceLevel: [],\n    workType: ['Remote'],\n    salaryRange: [],\n    skills: [],\n    sortBy: 'newest',\n    postedAge: '30DAYS',\n    companySize: [],\n    negativeKeywords: ''\n  });\n\n  const experienceLevels = [\n    'Entry Level (0-2 years)',\n    'Mid Level (2-4 years)', \n    'Senior Level (4-6 years)',\n    'Lead/Principal (6-10 years)',\n    'Executive (10+ years)'\n  ];\n\n  const workTypeOptions = [\n    { value: 'Remote', label: 'Remote', icon: '🌍', color: 'bg-green-100 text-green-800' },\n    { value: 'Hybrid', label: 'Hybrid', icon: '🏢', color: 'bg-blue-100 text-blue-800' },\n    { value: 'Onsite', label: 'On-site', icon: '🏙️', color: 'bg-gray-100 text-gray-800' }\n  ];\n\n  const salaryRanges = [\n    '$0 - $30k',\n    '$30k - $70k',\n    '$70k - $120k', \n    '$120k - $180k',\n    '$180k - $240k',\n    '$240k+'\n  ];\n\n  const postedAgeOptions = [\n    { value: '1DAY', label: 'Last 24 hours' },\n    { value: '3DAYS', label: 'Last 3 days' },\n    { value: '7DAYS', label: 'Last week' },\n    { value: '30DAYS', label: 'Last month' },\n    { value: 'ALL', label: 'Any time' }\n  ];\n\n  // Load user applied jobs from localStorage\n  useEffect(() => {\n    const applied = localStorage.getItem('appliedJobs');\n    const saved = localStorage.getItem('savedJobs');\n    if (applied) {\n      setAppliedJobs(new Set(JSON.parse(applied)));\n    }\n    if (saved) {\n      setSavedJobs(new Set(JSON.parse(saved)));\n    }\n  }, []);\n\n  const performSearch = useCallback(async (searchFilters: SearchFilters, page: number = 1) => {\n    setLoading(true);\n    setError('');\n\n    try {\n      const params = new URLSearchParams();\n      \n      // Handle multi-search from URL or filters\n      const urlParams = new URLSearchParams(location.search);\n      const isMultiSearch = urlParams.get('multi_search') === 'true';\n      const jobTitles = urlParams.get('job_titles');\n      \n      if (isMultiSearch && jobTitles) {\n        // Multi-position search\n        const titleArray = jobTitles.split(',');\n        setSelectedJobTitles(titleArray);\n        params.append('q', titleArray.join(' OR '));\n        params.append('job_titles', jobTitles);\n      } else if (searchFilters.jobTitle) {\n        params.append('q', searchFilters.jobTitle);\n      }\n      \n      if (searchFilters.location) params.append('location', searchFilters.location);\n      if (searchFilters.experienceLevel.length > 0) {\n        params.append('experience_level', searchFilters.experienceLevel.join(','));\n      }\n      if (searchFilters.workType.length > 0) {\n        params.append('work_type', searchFilters.workType.join(','));\n      }\n      if (searchFilters.salaryRange.length > 0) {\n        params.append('salary_range', searchFilters.salaryRange.join(','));\n      }\n      if (searchFilters.skills.length > 0) {\n        params.append('skills', searchFilters.skills.join(','));\n      }\n      if (searchFilters.postedAge !== 'ALL') {\n        params.append('posted_age', searchFilters.postedAge);\n      }\n      if (searchFilters.companySize.length > 0) {\n        params.append('company_size', searchFilters.companySize.join(','));\n      }\n      if (searchFilters.negativeKeywords) {\n        params.append('negative_keywords', searchFilters.negativeKeywords);\n      }\n      \n      params.append('page', page.toString());\n      params.append('limit', '20');\n      params.append('sort_by', searchFilters.sortBy);\n\n      const apiUrl = await getApiUrl();\n      const response = await fetch(`${apiUrl}/jobs/search?${params}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch jobs');\n      }\n\n      const data = await response.json();\n      \n      setJobs(data.jobs || []);\n      setTotalJobs(data.total || 0);\n      setCurrentPage(page);\n\n      // Update URL without page reload\n      const currentPath = location.pathname;\n      const newUrl = `${currentPath}?${params}`;\n      window.history.replaceState({}, '', newUrl);\n\n    } catch (error: any) {\n      setError(error.message || 'Failed to search jobs');\n      setJobs([]);\n      setTotalJobs(0);\n    } finally {\n      setLoading(false);\n    }\n  }, [location.pathname, location.search]);\n\n  useEffect(() => {\n    const searchParams = location.state?.searchParams || {};\n    const urlParams = new URLSearchParams(location.search);\n    \n    const initialFilters: SearchFilters = {\n      jobTitle: searchParams.job_title || urlParams.get('q') || urlParams.get('job_title') || urlParams.get('position') || '',\n      location: searchParams.location || urlParams.get('location') || '',\n      experienceLevel: searchParams.experience_level ? searchParams.experience_level.split(',') : [],\n      workType: searchParams.work_type ? searchParams.work_type.split(',') : ['Remote'],\n      salaryRange: searchParams.salary_range ? searchParams.salary_range.split(',') : [],\n      skills: searchParams.skills ? searchParams.skills.split(',') : [],\n      sortBy: 'newest',\n      postedAge: urlParams.get('posted_age') || '30DAYS',\n      companySize: searchParams.company_size ? searchParams.company_size.split(',') : [],\n      negativeKeywords: urlParams.get('negative_keywords') || ''\n    };\n\n    setFilters(initialFilters);\n    performSearch(initialFilters, 1);\n  }, [location, performSearch]);\n\n  const handleFilterChange = (newFilters: Partial<SearchFilters>) => {\n    const updatedFilters = { ...filters, ...newFilters };\n    setFilters(updatedFilters);\n    performSearch(updatedFilters, 1);\n  };\n\n  const handlePageChange = (page: number) => {\n    performSearch(filters, page);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const toggleArrayFilter = (array: string[], value: string, setter: (newArray: string[]) => void) => {\n    if (array.includes(value)) {\n      setter(array.filter(item => item !== value));\n    } else {\n      setter([...array, value]);\n    }\n  };\n\n  const clearAllFilters = () => {\n    const clearedFilters: SearchFilters = {\n      jobTitle: '',\n      location: '',\n      experienceLevel: [],\n      workType: ['Remote'],\n      salaryRange: [],\n      skills: [],\n      sortBy: 'newest',\n      postedAge: '30DAYS',\n      companySize: [],\n      negativeKeywords: ''\n    };\n    setFilters(clearedFilters);\n    setSelectedJobTitles([]);\n    performSearch(clearedFilters, 1);\n  };\n\n  const handleApplyJob = (jobId: string) => {\n    const newAppliedJobs = new Set([...appliedJobs, jobId]);\n    setAppliedJobs(newAppliedJobs);\n    localStorage.setItem('appliedJobs', JSON.stringify([...newAppliedJobs]));\n  };\n\n  const handleSaveJob = (jobId: string) => {\n    const newSavedJobs = savedJobs.has(jobId) \n      ? new Set([...savedJobs].filter(id => id !== jobId))\n      : new Set([...savedJobs, jobId]);\n    \n    setSavedJobs(newSavedJobs);\n    localStorage.setItem('savedJobs', JSON.stringify([...newSavedJobs]));\n  };\n\n  const removeJobTitle = (titleToRemove: string) => {\n    const updatedTitles = selectedJobTitles.filter(title => title !== titleToRemove);\n    setSelectedJobTitles(updatedTitles);\n    \n    if (updatedTitles.length === 0) {\n      // Clear search if no titles left\n      clearAllFilters();\n    } else {\n      // Update search with remaining titles\n      const updatedFilters = {\n        ...filters,\n        jobTitle: updatedTitles.join(' OR ')\n      };\n      setFilters(updatedFilters);\n      performSearch(updatedFilters, 1);\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just posted';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    return `${Math.floor(diffInDays / 7)}w ago`;\n  };\n\n  const totalPages = Math.ceil(totalJobs / 20);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header - JobsFromSpace Style */}\n      <div className=\"bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          {/* Multi-search indicators */}\n          {selectedJobTitles.length > 0 && (\n            <div className=\"mb-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-sm font-medium text-gray-700\">\n                  Searching for {selectedJobTitles.length} job title{selectedJobTitles.length > 1 ? 's' : ''}:\n                </h3>\n                <button\n                  onClick={clearAllFilters}\n                  className=\"text-xs text-red-600 hover:text-red-700\"\n                >\n                  Clear all\n                </button>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {selectedJobTitles.map((title, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full\"\n                  >\n                    <span className=\"truncate max-w-40\">{title}</span>\n                    <button\n                      onClick={() => removeJobTitle(title)}\n                      className=\"ml-2 text-blue-600 hover:text-blue-800\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">\n                Remote Jobs\n              </h1>\n              <div className=\"flex items-center gap-4 mt-2 text-gray-600\">\n                <span className=\"flex items-center gap-1\">\n                  <Briefcase className=\"w-4 h-4\" />\n                  {loading ? 'Searching...' : `${totalJobs.toLocaleString()} jobs`}\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <Users className=\"w-4 h-4\" />\n                  {appliedJobs.size} applied\n                </span>\n                <span className=\"flex items-center gap-1\">\n                  <Bookmark className=\"w-4 h-4\" />\n                  {savedJobs.size} saved\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              {/* Sort Options */}\n              <select\n                value={filters.sortBy}\n                onChange={(e) => handleFilterChange({ sortBy: e.target.value as any })}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"newest\">Most Recent</option>\n                <option value=\"relevance\">Most Relevant</option>\n                <option value=\"salary\">Highest Salary</option>\n              </select>\n\n              {/* View Mode Toggle */}\n              <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                <button\n                  onClick={() => setViewMode('list')}\n                  className={`p-2 rounded-md transition-colors ${\n                    viewMode === 'list'\n                      ? 'bg-white text-blue-600 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <List className=\"w-4 h-4\" />\n                </button>\n                <button\n                  onClick={() => setViewMode('grid')}\n                  className={`p-2 rounded-md transition-colors ${\n                    viewMode === 'grid'\n                      ? 'bg-white text-blue-600 shadow-sm'\n                      : 'text-gray-600 hover:text-gray-900'\n                  }`}\n                >\n                  <Grid3X3 className=\"w-4 h-4\" />\n                </button>\n              </div>\n\n              {/* Filters Toggle */}\n              <button\n                onClick={() => setShowFilters(!showFilters)}\n                className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n              >\n                <Filter className=\"w-4 h-4\" />\n                Filters\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        <div className=\"flex gap-6\">\n          {/* Filters Sidebar - JobsFromSpace Style */}\n          <div className={`${showFilters ? 'block' : 'hidden'} lg:block w-full lg:w-80 flex-shrink-0`}>\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 sticky top-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Filters</h3>\n                <button\n                  onClick={clearAllFilters}\n                  className=\"text-sm text-blue-600 hover:text-blue-700\"\n                >\n                  Clear All\n                </button>\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* Job Title */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Job Title\n                  </label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={filters.jobTitle}\n                      onChange={(e) => handleFilterChange({ jobTitle: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"e.g. Frontend Developer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Location */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Location\n                  </label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      value={filters.location}\n                      onChange={(e) => handleFilterChange({ location: e.target.value })}\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      placeholder=\"e.g. San Francisco, CA\"\n                    />\n                  </div>\n                </div>\n\n                {/* Work Type */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                    Work Type\n                  </label>\n                  <div className=\"space-y-2\">\n                    {workTypeOptions.map((type) => (\n                      <label key={type.value} className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.workType.includes(type.value)}\n                          onChange={() => toggleArrayFilter(\n                            filters.workType,\n                            type.value,\n                            (newArray) => handleFilterChange({ workType: newArray })\n                          )}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                        <span className=\"ml-3 flex items-center gap-2\">\n                          <span className={`px-2 py-1 text-xs rounded-full ${type.color}`}>\n                            {type.icon} {type.label}\n                          </span>\n                        </span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Experience Level */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                    Experience Level\n                  </label>\n                  <div className=\"space-y-2\">\n                    {experienceLevels.map((level) => (\n                      <label key={level} className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.experienceLevel.includes(level)}\n                          onChange={() => toggleArrayFilter(\n                            filters.experienceLevel,\n                            level,\n                            (newArray) => handleFilterChange({ experienceLevel: newArray })\n                          )}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                        <span className=\"ml-3 text-sm text-gray-700\">{level}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Salary Range */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                    Salary Range\n                  </label>\n                  <div className=\"space-y-2\">\n                    {salaryRanges.map((range) => (\n                      <label key={range} className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={filters.salaryRange.includes(range)}\n                          onChange={() => toggleArrayFilter(\n                            filters.salaryRange,\n                            range,\n                            (newArray) => handleFilterChange({ salaryRange: newArray })\n                          )}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                        <span className=\"ml-3 text-sm text-gray-700\">{range}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Posted Age */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Posted Date\n                  </label>\n                  <select\n                    value={filters.postedAge}\n                    onChange={(e) => handleFilterChange({ postedAge: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  >\n                    {postedAgeOptions.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Negative Keywords */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Exclude Keywords\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={filters.negativeKeywords}\n                    onChange={(e) => handleFilterChange({ negativeKeywords: e.target.value })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"e.g. sales, marketing\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Jobs containing these keywords will be excluded\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Results */}\n          <div className=\"flex-1\">\n            {loading ? (\n              <div className=\"flex justify-center items-center h-64\">\n                <div className=\"w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n              </div>\n            ) : error ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-red-600 mb-4\">\n                  <ExternalLink className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  Error Loading Jobs\n                </h3>\n                <p className=\"text-gray-600 mb-4\">{error}</p>\n                <button\n                  onClick={() => performSearch(filters, currentPage)}\n                  className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n                >\n                  Try Again\n                </button>\n              </div>\n            ) : jobs.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Search className=\"w-12 h-12 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  No jobs found\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Try adjusting your search criteria or clearing some filters\n                </p>\n                <button\n                  onClick={clearAllFilters}\n                  className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\n                >\n                  Clear Filters\n                </button>\n              </div>\n            ) : (\n              <>\n                {/* Results */}\n                <div className={\n                  viewMode === 'grid' \n                    ? 'grid gap-6 md:grid-cols-2 lg:grid-cols-1 xl:grid-cols-2' \n                    : 'space-y-4'\n                }>\n                  {jobs.map((job) => (\n                    <div key={job.id || job._id} className=\"bg-white rounded-lg shadow-sm border hover:shadow-md transition-shadow p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex items-start gap-4 flex-1\">\n                          <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center text-xl shadow-sm flex-shrink-0\">\n                            {job.company_logo || (typeof job.company === 'string' ? job.company[0]?.toUpperCase() : '🏢')}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-lg font-semibold text-gray-900 hover:text-blue-600 cursor-pointer mb-1\">\n                              {job.title}\n                            </h3>\n                            <div className=\"flex items-center gap-4 text-sm text-gray-600 mb-3\">\n                              <div className=\"flex items-center gap-1\">\n                                <Building2 className=\"w-4 h-4\" />\n                                <span className=\"font-medium\">{typeof job.company === 'string' ? job.company : job.company?.name || 'Unknown Company'}</span>\n                              </div>\n                              {job.location && (\n                                <div className=\"flex items-center gap-1\">\n                                  <MapPin className=\"w-4 h-4\" />\n                                  {job.location}\n                                </div>\n                              )}\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"w-4 h-4\" />\n                                {formatTimeAgo(job.createdAt || job.created_at)}\n                              </div>\n                            </div>\n                            \n                            {/* Job Tags */}\n                            <div className=\"flex flex-wrap gap-2 mb-4\">\n                              {job.isRemote && (\n                                <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium\">\n                                  <span>🌍</span> <span>Remote</span>\n                                </span>\n                              )}\n                              {job.job_type && (\n                                <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                                  {job.job_type}\n                                </span>\n                              )}\n                              {job.salary && (\n                                <span className=\"px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full\">\n                                  {typeof job.salary === 'string' \n                                    ? `💰 ${job.salary}` \n                                    : `💰 ${job.salary.currency || '$'}${job.salary.min ? `${job.salary.min.toLocaleString()}` : ''}${job.salary.max ? ` - ${job.salary.max.toLocaleString()}` : ''}`\n                                  }\n                                </span>\n                              )}\n                              {job.skills && job.skills.slice(0, 3).map((skill, index) => (\n                                <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded-full\">\n                                  {skill}\n                                </span>\n                              ))}\n                            </div>\n\n                            {/* Job Description Preview */}\n                            {job.description && (\n                              <p className=\"text-sm text-gray-600 line-clamp-2 mb-4\">\n                                {job.description.length > 150 \n                                  ? `${job.description.substring(0, 150)}...`\n                                  : job.description\n                                }\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex flex-col items-end gap-2 flex-shrink-0 ml-4\">\n                          <button\n                            onClick={() => handleSaveJob(job.id || job._id)}\n                            className={`p-2 rounded-full transition-colors ${\n                              savedJobs.has(job.id || job._id)\n                                ? 'bg-yellow-100 text-yellow-600'\n                                : 'bg-gray-100 text-gray-400 hover:bg-yellow-100 hover:text-yellow-600'\n                            }`}\n                          >\n                            {savedJobs.has(job.id || job._id) ? (\n                              <Bookmark className=\"w-5 h-5 fill-current\" />\n                            ) : (\n                              <BookmarkPlus className=\"w-5 h-5\" />\n                            )}\n                          </button>\n                          \n                          {appliedJobs.has(job.id || job._id) ? (\n                            <div className=\"flex items-center gap-1 text-green-600 font-medium text-sm\">\n                              <CheckCircle2 className=\"w-4 h-4\" />\n                              Applied\n                            </div>\n                          ) : (\n                            <div className=\"flex flex-col gap-2\">\n                              <div className=\"flex gap-2\">\n                                <button\n                                  onClick={() => navigate(`/jobs/${job.id || job._id}`)}\n                                  className=\"px-3 py-2 text-blue-600 border border-blue-600 rounded-lg hover:bg-blue-50 transition-colors text-sm font-medium\"\n                                >\n                                  Details\n                                </button>\n                                <button\n                                  onClick={() => handleApplyJob(job.id || job._id)}\n                                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium flex items-center gap-1\"\n                                >\n                                  <ExternalLink className=\"w-4 h-4\" />\n                                  Apply\n                                </button>\n                              </div>\n                              \n                              {/* Auto Apply Button */}\n                              {(job.applyUrl || job.applicationUrl) && (\n                                <AutoApplyButton\n                                  jobUrl={job.applyUrl || job.applicationUrl || '#'}\n                                  jobId={job.id || job._id}\n                                  onApplied={(applicationId) => handleApplyJob(job.id || job._id)}\n                                  size=\"sm\"\n                                  className=\"w-full\"\n                                />\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Job Stats */}\n                      <div className=\"flex items-center justify-between pt-4 border-t border-gray-100 text-xs text-gray-500\">\n                        <div className=\"flex items-center gap-4\">\n                          {job.applicantCount && (\n                            <span className=\"flex items-center gap-1\">\n                              <Users className=\"w-3 h-3\" />\n                              {job.applicantCount} applicants\n                            </span>\n                          )}\n                          {job.views_count && (\n                            <span className=\"flex items-center gap-1\">\n                              <Eye className=\"w-3 h-3\" />\n                              {job.views_count} views\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <TrendingUp className=\"w-3 h-3\" />\n                          High match\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"mt-8 flex justify-center\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={() => handlePageChange(currentPage - 1)}\n                        disabled={currentPage === 1}\n                        className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        Previous\n                      </button>\n                      \n                      {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                        const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;\n                        return (\n                          <button\n                            key={pageNum}\n                            onClick={() => handlePageChange(pageNum)}\n                            className={`px-3 py-2 border rounded-lg text-sm font-medium ${\n                              pageNum === currentPage\n                                ? 'border-blue-500 bg-blue-600 text-white'\n                                : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50'\n                            }`}\n                          >\n                            {pageNum}\n                          </button>\n                        );\n                      })}\n                      \n                      <button\n                        onClick={() => handlePageChange(currentPage + 1)}\n                        disabled={currentPage === totalPages}\n                        className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JobSearchResults; "],"names":["cachedApiUrl","apiUrlPromise","API_BASE_URL","process","clearApiUrlCache","console","log","getApiUrl","async","detectBackendPort","error","window","_ref","jobUrl","jobId","onApplied","className","size","isAnalyzing","setIsAnalyzing","useState","isApplying","setIsApplying","showPreview","setShowPreview","analysisResult","setAnalysisResult","previewData","setPreviewData","setError","success","setSuccess","config","sm","button","icon","text","md","lg","analyzeForm","apiUrl","token","localStorage","getItem","Error","response","fetch","concat","method","headers","body","JSON","stringify","job_url","ok","result","json","auto_apply_supported","getPreview","err","message","preview","performAutoApply","job_id","application_id","_jsxs","children","_jsx","CheckCircle2","AlertCircle","onClick","total_fields","fields_with_responses","_previewData$user_pro","user_profile_completeness","overall_percentage","_previewData$user_pro2","ready_for_auto_apply","_previewData$field_pr","field_previews","slice","map","field","index","field_label","field_name","generated_value","disabled","_Fragment","Loader","Zap","JobSearchResults","location","useLocation","navigate","useNavigate","jobs","setJobs","loading","setLoading","currentPage","setCurrentPage","totalJobs","setTotalJobs","viewMode","setViewMode","showFilters","setShowFilters","appliedJobs","setAppliedJobs","Set","savedJobs","setSavedJobs","selectedJobTitles","setSelectedJobTitles","filters","setFilters","jobTitle","experienceLevel","workType","salaryRange","skills","sortBy","postedAge","companySize","negativeKeywords","useEffect","applied","saved","parse","performSearch","useCallback","searchFilters","page","arguments","length","undefined","params","URLSearchParams","urlParams","search","isMultiSearch","get","jobTitles","titleArray","split","append","join","toString","data","total","currentPath","pathname","newUrl","history","replaceState","_location$state","searchParams","state","initialFilters","job_title","experience_level","work_type","salary_range","company_size","handleFilterChange","newFilters","updatedFilters","_objectSpread","handlePageChange","scrollTo","top","behavior","toggleArrayFilter","array","value","setter","includes","filter","item","clearAllFilters","clearedFilters","handleApplyJob","newAppliedJobs","setItem","formatTimeAgo","dateString","date","Date","now","diffInHours","Math","floor","getTime","diffInDays","totalPages","ceil","title","titleToRemove","updatedTitles","removeJobTitle","X","Briefcase","toLocaleString","Users","Bookmark","onChange","e","target","List","Grid3X3","Filter","Search","type","placeholder","MapPin","label","color","checked","newArray","level","range","option","ExternalLink","job","_job$company$","_job$company","company_logo","company","toUpperCase","Building2","name","Clock","createdAt","created_at","isRemote","job_type","salary","currency","min","max","skill","description","substring","newSavedJobs","has","id","handleSaveJob","_id","BookmarkPlus","applyUrl","applicationUrl","AutoApplyButton","applicationId","applicantCount","views_count","Eye","TrendingUp","Array","from","_","i","pageNum"],"sourceRoot":""}